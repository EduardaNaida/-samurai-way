{"ast":null,"code":"import { getAuthUserData } from \"./authReducer\";\nconst SET_INITIALIZED = \"SET_INITIALIZED\";\nconst initialState = {\n  initialized: false\n};\nexport const appReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case SET_INITIALIZED:\n      return { ...state,\n        initialized: true\n      };\n\n    default:\n      return state;\n  }\n};\nexport const setInitialized = () => {\n  return {\n    type: SET_INITIALIZED\n  };\n};\nexport const initializeApp = () => dispatch => {\n  dispatch(getAuthUserData());\n};","map":{"version":3,"sources":["/Users/eduardanaida/Documents/GitHub/-samurai-way/samurai-way/src/redux/appReducer.ts"],"names":["getAuthUserData","SET_INITIALIZED","initialState","initialized","appReducer","state","action","type","setInitialized","initializeApp","dispatch"],"mappings":"AAIA,SAAQA,eAAR,QAA8B,eAA9B;AAKA,MAAMC,eAAe,GAAG,iBAAxB;AAMA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,WAAW,EAAE;AADI,CAArB;AAKA,OAAO,MAAMC,UAAU,GAAG,YAAoF;AAAA,MAAnFC,KAAmF,uEAA9DH,YAA8D;AAAA,MAAhDI,MAAgD;;AAC1G,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKN,eAAL;AACI,aAAO,EACH,GAAGI,KADA;AACOF,QAAAA,WAAW,EAAE;AADpB,OAAP;;AAGJ;AACI,aAAOE,KAAP;AANR;AAQH,CATM;AAWP,OAAO,MAAMG,cAAc,GAAG,MAAM;AAChC,SAAO;AAACD,IAAAA,IAAI,EAAEN;AAAP,GAAP;AACH,CAFM;AAIP,OAAO,MAAMQ,aAAa,GAAG,MAAOC,QAAD,IAA+B;AAC9DA,EAAAA,QAAQ,CAACV,eAAe,EAAhB,CAAR;AACH,CAFM","sourcesContent":["import {Dispatch} from \"redux\";\nimport {authAPI} from \"../api/api\";\nimport {AppDispatch, AppDispatchType, DispatchType} from \"./redux-store\";\nimport {stopSubmit} from \"redux-form\";\nimport {getAuthUserData} from \"./authReducer\";\n\nexport type authReducersActionType =\n    | ReturnType<typeof setInitialized>\n\nconst SET_INITIALIZED = \"SET_INITIALIZED\";\n\nexport type AppDataType = {\n    initialized: boolean\n}\n\nconst initialState = {\n    initialized: false\n}\n\n\nexport const appReducer = (state: AppDataType = initialState, action: authReducersActionType): AppDataType => {\n    switch (action.type) {\n        case SET_INITIALIZED:\n            return {\n                ...state, initialized: true\n            }\n        default:\n            return state;\n    }\n};\n\nexport const setInitialized = () => {\n    return {type: SET_INITIALIZED} as const\n}\n\nexport const initializeApp = () => (dispatch: AppDispatchType) => {\n    dispatch(getAuthUserData())\n}"]},"metadata":{},"sourceType":"module"}