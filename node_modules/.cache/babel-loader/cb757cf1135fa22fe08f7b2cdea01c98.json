{"ast":null,"code":"const ADD_POST = 'ADD-POST';\nconst NEW_POST_TEXT = 'NEW-POST-TEXT';\nexport let state = {\n  profilePage: {\n    postData: [{\n      name: 'Eduarda',\n      message: 'Hello',\n      likes: '15'\n    }, {\n      name: 'Artsiom',\n      message: 'Good morning',\n      likes: '20'\n    }],\n    newTextValue: ''\n  },\n  dialogsPage: {\n    dialogsData: [{\n      id: 1,\n      name: 'Eduarda'\n    }, {\n      id: 2,\n      name: 'Artiom'\n    }, {\n      id: 3,\n      name: 'Dasha'\n    }, {\n      id: 4,\n      name: 'Ivan'\n    }, {\n      id: 5,\n      name: 'Ekaterina'\n    }],\n    messageData: [{\n      id: 1,\n      message: 'Hi!'\n    }, {\n      id: 2,\n      message: 'How is your day?'\n    }, {\n      id: 3,\n      message: 'It\\'s good, thanks!'\n    }]\n  },\n  sidebar: {}\n};\nexport let store = {\n  _callSubscriber() {\n    console.log('state changed');\n  },\n\n  _state: {\n    profilePage: {\n      postData: [{\n        name: 'Eduarda',\n        message: 'Hello',\n        likes: '15'\n      }, {\n        name: 'Artsiom',\n        message: 'Good morning',\n        likes: '20'\n      }],\n      newTextValue: ''\n    },\n    dialogsPage: {\n      dialogsData: [{\n        id: 1,\n        name: 'Eduarda'\n      }, {\n        id: 2,\n        name: 'Artiom'\n      }, {\n        id: 3,\n        name: 'Dasha'\n      }, {\n        id: 4,\n        name: 'Ivan'\n      }, {\n        id: 5,\n        name: 'Ekaterina'\n      }],\n      messageData: [{\n        id: 1,\n        message: 'Hi!'\n      }, {\n        id: 2,\n        message: 'How is your day?'\n      }, {\n        id: 3,\n        message: 'It\\'s good, thanks!'\n      }]\n    },\n    sidebar: {}\n  },\n\n  getState() {\n    return this._state;\n  },\n\n  subscribe(observer) {\n    this._callSubscriber = observer;\n  },\n\n  /*    addPost(postMessage: string) {\n          const newPost: PostData = {\n              name: 'Alex',\n              message: postMessage,\n              likes: '10',\n          }\n          this._state.profilePage.postData.push(newPost)\n          this._state.profilePage.newTextValue = '';\n          this._callSubscriber()\n      },\n      updateNewPostText(newText: string) {\n          this._state.profilePage.newTextValue = newText;\n          this._callSubscriber()\n      },*/\n  dispatch(action) {\n    if (action.type === ADD_POST) {\n      const newPost = {\n        name: 'Alex',\n        message: action.postMessage,\n        likes: '10'\n      };\n\n      this._state.profilePage.postData.push(newPost);\n\n      this._state.profilePage.newTextValue = '';\n\n      this._callSubscriber();\n    } else if (action.type === NEW_POST_TEXT) {\n      this._state.profilePage.newTextValue = action.newText;\n\n      this._callSubscriber();\n    }\n  }\n\n};\nexport const AddPostAC = newTextValue => ({\n  type: ADD_POST,\n  postMessage: newTextValue\n});\n_c = AddPostAC;\nexport const NewPostText = newText => ({\n  type: NEW_POST_TEXT,\n  newText: newText\n}); // export const addPost = (postMessage: string) => {\n//     const newPost: PostData = {\n//         name: 'Alex',\n//         message: postMessage,\n//         likes: '10',\n//     }\n//     state.profilePage.postData.push(newPost)\n//     state.profilePage.newTextValue = '';\n//     //renderTree();\n//     store.renderTree()\n// }\n\n/*\nexport const updateNewPostText = (newText: string) => {\n    state.profilePage.newTextValue = newText;\n    store.renderTree()\n}*/\n// export const subscribe = (observer: () => void) => {\n//     renderTree = observer;\n// }\n\n_c2 = NewPostText;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"AddPostAC\");\n$RefreshReg$(_c2, \"NewPostText\");","map":{"version":3,"sources":["/Users/eduardanaida/Documents/GitHub/-samurai-way/samurai-way/src/redux/state.tsx"],"names":["ADD_POST","NEW_POST_TEXT","state","profilePage","postData","name","message","likes","newTextValue","dialogsPage","dialogsData","id","messageData","sidebar","store","_callSubscriber","console","log","_state","getState","subscribe","observer","dispatch","action","type","newPost","postMessage","push","newText","AddPostAC","NewPostText"],"mappings":"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","sourcesContent":["export type DialogsPageType = {\n    messageData: Array<MessageData>\n    dialogsData: Array<DialogsData>\n}\n\nexport type ProfilePageType = {\n    postData: Array<PostData>\n    newTextValue: string\n}\n\nexport type PostData = {\n    name: string\n    message: string\n    likes: string\n}\n\nexport type MessageData = {\n    id: number\n    message: string\n}\n\nexport type DialogsData = {\n    id: number\n    name: string\n}\n\nexport type SidebarType = {}\n\nexport type RootStateType = {\n    profilePage: ProfilePageType\n    dialogsPage: DialogsPageType\n    sidebar: SidebarType\n}\n\nconst ADD_POST = 'ADD-POST';\nconst NEW_POST_TEXT = 'NEW-POST-TEXT';\n\nexport let state: RootStateType = {\n    profilePage: {\n        postData: [\n            {name: 'Eduarda', message: 'Hello', likes: '15'},\n            {name: 'Artsiom', message: 'Good morning', likes: '20'}\n        ],\n        newTextValue: ''\n    },\n    dialogsPage: {\n        dialogsData: [\n            {id: 1, name: 'Eduarda'},\n            {id: 2, name: 'Artiom'},\n            {id: 3, name: 'Dasha'},\n            {id: 4, name: 'Ivan'},\n            {id: 5, name: 'Ekaterina'},\n        ],\n        messageData: [\n            {id: 1, message: 'Hi!'},\n            {id: 2, message: 'How is your day?'},\n            {id: 3, message: 'It\\'s good, thanks!'},\n        ]\n    },\n    sidebar: {}\n}\n\nexport type AddPostActionType = {\n    type: \"ADD-POST\"\n    postMessage: string\n}\n\nexport type ChangeNewTextType = {\n    type: \"NEW-POST-TEXT\"\n    newText: string\n}\n\nexport type ActionsType = AddPostActionType | ChangeNewTextType\n\n\nexport type StoreType = {\n    _state: RootStateType,\n    _callSubscriber: () => void\n    getState: () => RootStateType\n    // addPost: (postMessage: string) => void\n    subscribe: (observer: () => void) => void\n    // updateNewPostText: (newText: string) => void\n    dispatch: (action: ActionsType) => void\n}\n\nexport let store: StoreType = {\n    _callSubscriber() {\n        console.log('state changed')\n    },\n    _state: {\n        profilePage: {\n            postData: [\n                {name: 'Eduarda', message: 'Hello', likes: '15'},\n                {name: 'Artsiom', message: 'Good morning', likes: '20'}\n            ],\n            newTextValue: ''\n        },\n        dialogsPage: {\n            dialogsData: [\n                {id: 1, name: 'Eduarda'},\n                {id: 2, name: 'Artiom'},\n                {id: 3, name: 'Dasha'},\n                {id: 4, name: 'Ivan'},\n                {id: 5, name: 'Ekaterina'},\n            ],\n            messageData: [\n                {id: 1, message: 'Hi!'},\n                {id: 2, message: 'How is your day?'},\n                {id: 3, message: 'It\\'s good, thanks!'},\n            ]\n        },\n        sidebar: {}\n    },\n    getState() {\n        return this._state;\n    },\n    subscribe(observer: () => void) {\n        this._callSubscriber = observer;\n    },\n\n    /*    addPost(postMessage: string) {\n            const newPost: PostData = {\n                name: 'Alex',\n                message: postMessage,\n                likes: '10',\n            }\n            this._state.profilePage.postData.push(newPost)\n            this._state.profilePage.newTextValue = '';\n            this._callSubscriber()\n        },\n        updateNewPostText(newText: string) {\n            this._state.profilePage.newTextValue = newText;\n            this._callSubscriber()\n        },*/\n    dispatch(action) {\n        if (action.type === ADD_POST) {\n            const newPost: PostData = {\n                name: 'Alex',\n                message: action.postMessage,\n                likes: '10',\n            }\n            this._state.profilePage.postData.push(newPost)\n            this._state.profilePage.newTextValue = '';\n            this._callSubscriber()\n        } else if (action.type === NEW_POST_TEXT) {\n            this._state.profilePage.newTextValue = action.newText;\n            this._callSubscriber()\n        }\n    }\n\n}\n\nexport const AddPostAC = (newTextValue: string): AddPostActionType => ({\n    type: ADD_POST,\n    postMessage: newTextValue\n})\n\nexport const NewPostText = (newText: string): ChangeNewTextType => ({\n    type: NEW_POST_TEXT,\n    newText: newText\n})\n// export const addPost = (postMessage: string) => {\n//     const newPost: PostData = {\n//         name: 'Alex',\n//         message: postMessage,\n//         likes: '10',\n//     }\n//     state.profilePage.postData.push(newPost)\n//     state.profilePage.newTextValue = '';\n//     //renderTree();\n//     store.renderTree()\n// }\n/*\nexport const updateNewPostText = (newText: string) => {\n    state.profilePage.newTextValue = newText;\n    store.renderTree()\n}*/\n\n// export const subscribe = (observer: () => void) => {\n//     renderTree = observer;\n// }"]},"metadata":{},"sourceType":"module"}