{"ast":null,"code":"var _jsxFileName = \"/Users/eduardanaida/Documents/GitHub/-samurai-way/samurai-way/src/components/Dialogs/Dialogs.tsx\";\nimport React from 'react';\nimport s from './Dialogs.module.css';\nimport { DialogItem } from \"./DialogItem/DialogItem\";\nimport { Message } from \"./Message/Message\";\nimport { Field, reduxForm } from \"redux-form\"; // type DialogsType = {\n//     dialogsPage: DialogsPageType\n//     addMessage: () => void\n//     onChangeMessage: (newMessage: string) => void\n// }\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Dialogs = props => {\n  const dialog = props.dialogsPage.dialogsData.map(ev => {\n    return /*#__PURE__*/_jsxDEV(DialogItem, {\n      id: ev.id,\n      name: ev.name\n    }, ev.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 13\n    }, this);\n  });\n  const message = props.dialogsPage.messageData.map(ev => {\n    return /*#__PURE__*/_jsxDEV(Message, {\n      id: ev.id,\n      message: ev.message\n    }, ev.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 13\n    }, this);\n  });\n\n  const addMessage = newMessage => {\n    //props.dispatch(AddMessage(props.newMessage));\n    props.addMessage(newMessage.text);\n  };\n\n  const onChangeMessage = e => {\n    props.onChangeMessage(e.currentTarget.value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: s.dialogs,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: s.dialogItem,\n      children: dialog\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: s.messages,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(DialogsReduxForm, {\n          onSubmit: addMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 20\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 9\n  }, this);\n};\n_c = Dialogs;\n\nconst DialogsForm = props => {\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: props.handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Field, {\n        placeholder: 'Enter your message',\n        component: 'textarea'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 15\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 15\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 7\n  }, this);\n};\n\n_c2 = DialogsForm;\nconst DialogsReduxForm = reduxForm({\n  form: 'text'\n})(DialogsForm);\n_c3 = DialogsReduxForm;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Dialogs\");\n$RefreshReg$(_c2, \"DialogsForm\");\n$RefreshReg$(_c3, \"DialogsReduxForm\");","map":{"version":3,"sources":["/Users/eduardanaida/Documents/GitHub/-samurai-way/samurai-way/src/components/Dialogs/Dialogs.tsx"],"names":["React","s","DialogItem","Message","Field","reduxForm","Dialogs","props","dialog","dialogsPage","dialogsData","map","ev","id","name","message","messageData","addMessage","newMessage","text","onChangeMessage","e","currentTarget","value","dialogs","dialogItem","messages","DialogsForm","handleSubmit","DialogsReduxForm","form"],"mappings":";AAAA,OAAOA,KAAP,MAAiC,OAAjC;AACA,OAAOC,CAAP,MAAc,sBAAd;AACA,SAAQC,UAAR,QAAyB,yBAAzB;AACA,SAAQC,OAAR,QAAsB,mBAAtB;AAIA,SAAQC,KAAR,EAAkCC,SAAlC,QAAkD,YAAlD,C,CAEA;AACA;AACA;AACA;AACA;;;AAEA,OAAO,MAAMC,OAAO,GAAIC,KAAD,IAA6B;AAEhD,QAAMC,MAAM,GAAGD,KAAK,CAACE,WAAN,CAAkBC,WAAlB,CAA8BC,GAA9B,CAAmCC,EAAD,IAAQ;AACrD,wBACI,QAAC,UAAD;AAAwB,MAAA,EAAE,EAAEA,EAAE,CAACC,EAA/B;AAAmC,MAAA,IAAI,EAAED,EAAE,CAACE;AAA5C,OAAiBF,EAAE,CAACC,EAApB;AAAA;AAAA;AAAA;AAAA,YADJ;AAGH,GAJc,CAAf;AAKA,QAAME,OAAO,GAAGR,KAAK,CAACE,WAAN,CAAkBO,WAAlB,CAA8BL,GAA9B,CAAmCC,EAAD,IAAQ;AACtD,wBACI,QAAC,OAAD;AAAqB,MAAA,EAAE,EAAEA,EAAE,CAACC,EAA5B;AAAgC,MAAA,OAAO,EAAED,EAAE,CAACG;AAA5C,OAAcH,EAAE,CAACC,EAAjB;AAAA;AAAA;AAAA;AAAA,YADJ;AAGH,GAJe,CAAhB;;AAMA,QAAMI,UAAU,GAAIC,UAAD,IAA8B;AAC7C;AACAX,IAAAA,KAAK,CAACU,UAAN,CAAiBC,UAAU,CAACC,IAA5B;AACH,GAHD;;AAKA,QAAMC,eAAe,GAAIC,CAAD,IAAyC;AAC7Dd,IAAAA,KAAK,CAACa,eAAN,CAAsBC,CAAC,CAACC,aAAF,CAAgBC,KAAtC;AAEH,GAHD;;AAMA,sBAEI;AAAK,IAAA,SAAS,EAAEtB,CAAC,CAACuB,OAAlB;AAAA,4BACI;AAAK,MAAA,SAAS,EAAEvB,CAAC,CAACwB,UAAlB;AAAA,gBACKjB;AADL;AAAA;AAAA;AAAA;AAAA,YADJ,eAKI;AAAK,MAAA,SAAS,EAAEP,CAAC,CAACyB,QAAlB;AAAA,8BACI;AAAA,kBAAMX;AAAN;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAA,+BACG,QAAC,gBAAD;AAAkB,UAAA,QAAQ,EAAEE;AAA5B;AAAA;AAAA;AAAA;AAAA;AADH;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YALJ;AAAA;AAAA;AAAA;AAAA;AAAA,UAFJ;AAgBH,CAxCM;KAAMX,O;;AA8Cb,MAAMqB,WAAsD,GAAIpB,KAAD,IAAW;AACxE,sBACI;AAAM,IAAA,QAAQ,EAAEA,KAAK,CAACqB,YAAtB;AAAA,4BACI;AAAA,6BACI,QAAC,KAAD;AAAO,QAAA,WAAW,EAAE,oBAApB;AAA0C,QAAA,SAAS,EAAE;AAArD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADJ,eAII;AAAA,6BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAUD,CAXD;;MAAMD,W;AAaN,MAAME,gBAAgB,GAAGxB,SAAS,CAAe;AAACyB,EAAAA,IAAI,EAAE;AAAP,CAAf,CAAT,CAAwCH,WAAxC,CAAzB;MAAME,gB","sourcesContent":["import React, {ChangeEvent} from 'react';\nimport s from './Dialogs.module.css'\nimport {DialogItem} from \"./DialogItem/DialogItem\";\nimport {Message} from \"./Message/Message\";\n\nimport {DialogsPropsType} from \"./DialogsContainer\";\nimport {Redirect} from \"react-router-dom\";\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\n\n// type DialogsType = {\n//     dialogsPage: DialogsPageType\n//     addMessage: () => void\n//     onChangeMessage: (newMessage: string) => void\n// }\n\nexport const Dialogs = (props: DialogsPropsType) => {\n\n    const dialog = props.dialogsPage.dialogsData.map((ev) => {\n        return (\n            <DialogItem key={ev.id} id={ev.id} name={ev.name}/>\n        )\n    })\n    const message = props.dialogsPage.messageData.map((ev) => {\n        return (\n            <Message key={ev.id} id={ev.id} message={ev.message}/>\n        )\n    })\n\n    const addMessage = (newMessage: FormDataType) => {\n        //props.dispatch(AddMessage(props.newMessage));\n        props.addMessage(newMessage.text);\n    }\n\n    const onChangeMessage = (e: ChangeEvent<HTMLTextAreaElement>) => {\n        props.onChangeMessage(e.currentTarget.value)\n\n    }\n\n\n    return (\n\n        <div className={s.dialogs}>\n            <div className={s.dialogItem}>\n                {dialog}\n            </div>\n\n            <div className={s.messages}>\n                <div>{message}</div>\n                <div>\n                   <DialogsReduxForm onSubmit={addMessage}/>\n                </div>\n            </div>\n\n        </div>\n    );\n};\n\ntype FormDataType = {\n    text: string\n}\n\nconst DialogsForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\n  return(\n      <form onSubmit={props.handleSubmit}>\n          <div>\n              <Field placeholder={'Enter your message'} component={'textarea'}></Field>\n          </div>\n          <div>\n              <button>Send</button>\n          </div>\n      </form>\n  )\n}\n\nconst DialogsReduxForm = reduxForm<FormDataType>({form: 'text'})(DialogsForm)"]},"metadata":{},"sourceType":"module"}