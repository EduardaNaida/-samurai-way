{"ast":null,"code":"import { AddPostAC, NewPostText } from \"../../../redux/profileReducer\";\nimport { MyPosts } from \"./MyPosts\";\nimport { connect } from \"react-redux\";\n\nconst mapStateToProps = state => {\n  return {\n    profilePage: state.profilePage,\n    newTextValue: state.profilePage.newTextValue\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    addPostCallback: newTextValue => {\n      dispatch(AddPostAC(newTextValue));\n    },\n    updateNewPostText: text => {\n      dispatch(NewPostText(text));\n    }\n  };\n};\n\nexport const MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);","map":{"version":3,"sources":["/Users/eduardanaida/Documents/GitHub/-samurai-way/samurai-way/src/components/Profile/MyPosts/MyPostsContainer.tsx"],"names":["AddPostAC","NewPostText","MyPosts","connect","mapStateToProps","state","profilePage","newTextValue","mapDispatchToProps","dispatch","addPostCallback","updateNewPostText","text","MyPostsContainer"],"mappings":"AAEA,SAAQA,SAAR,EAAmBC,WAAnB,QAAsD,+BAAtD;AACA,SAAQC,OAAR,QAAsB,WAAtB;AACA,SAAQC,OAAR,QAAsB,aAAtB;;AAyCA,MAAMC,eAAe,GAAIC,KAAD,IAA4C;AAChE,SAAO;AACHC,IAAAA,WAAW,EAAED,KAAK,CAACC,WADhB;AAEHC,IAAAA,YAAY,EAAEF,KAAK,CAACC,WAAN,CAAkBC;AAF7B,GAAP;AAIH,CALD;;AAOA,MAAMC,kBAAkB,GAAIC,QAAD,IAA8C;AACrE,SAAO;AACHC,IAAAA,eAAe,EAAGH,YAAD,IAA0B;AACvCE,MAAAA,QAAQ,CAACT,SAAS,CAACO,YAAD,CAAV,CAAR;AACH,KAHE;AAIHI,IAAAA,iBAAiB,EAAGC,IAAD,IAAkB;AACjCH,MAAAA,QAAQ,CAACR,WAAW,CAACW,IAAD,CAAZ,CAAR;AACH;AANE,GAAP;AAQH,CATD;;AAWA,OAAO,MAAMC,gBAAgB,GAAGV,OAAO,CAACC,eAAD,EAAkBI,kBAAlB,CAAP,CAA6CN,OAA7C,CAAzB","sourcesContent":["import React from 'react';\nimport {RootStateType} from \"../../../redux/store\";\nimport {AddPostAC, NewPostText, ProfilePageType} from \"../../../redux/profileReducer\";\nimport {MyPosts} from \"./MyPosts\";\nimport {connect} from \"react-redux\";\nimport {Dispatch} from \"redux\";\nimport {AppStateType} from \"../../../redux/redux-store\";\n\n// type MyPostPropsType = {\n//     newTextValue: string\n//     store: StoreType\n// }\n\n\n/*export const MyPostsContainer = (props: MyPostPropsType) => {\n    let state = props.store.getState();\n    const addPost = () => {\n        props.store.dispatch(AddPostAC(props.newTextValue));\n\n    }\n\n    const onChangeText = (text: string) => {\n        props.store.dispatch(NewPostText(text));\n    }\n    return (\n        <div className={s.posts}>\n            <MyPosts addPostCallback={addPost}\n                     updateNewPostText={onChangeText}\n                     profilePage={state.profilePage}/>\n        </div>\n    );\n};*/\n\ntype MapStatePropsType = {\n    profilePage: ProfilePageType\n    newTextValue: string\n}\n\ntype MapDispatchPropsType = {\n    addPostCallback: (newTextValue: string) => void\n    updateNewPostText: (newMessage: string) => void\n}\n\nexport type ProfilePropsType = MapStatePropsType & MapDispatchPropsType\n\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\n    return {\n        profilePage: state.profilePage,\n        newTextValue: state.profilePage.newTextValue\n    }\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchPropsType => {\n    return {\n        addPostCallback: (newTextValue: string) => {\n            dispatch(AddPostAC(newTextValue));\n        },\n        updateNewPostText: (text: string) => {\n            dispatch(NewPostText(text));\n        }\n    }\n}\n\nexport const MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);"]},"metadata":{},"sourceType":"module"}