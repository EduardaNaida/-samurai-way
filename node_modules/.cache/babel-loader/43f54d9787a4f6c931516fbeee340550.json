{"ast":null,"code":"import { authMe, followAPI, usersAPI } from \"../api/api\";\nimport { setUserData } from \"./authReducer\";\nconst FOLLOW = \"FOLLOW\";\nconst UNFOLLOW = \"UNFOLLOW\";\nconst SET_USERS = \"SET_USERS\";\nconst SET_CURRENT_PAGE = \"SET_CURRENT_PAGE\";\nconst SET_TOTAL_COUNT = 'SET_TOTAL_COUNT';\nconst TOGGLE_IS_FETCHING = 'TOGGLE_IS_FETCHING';\nconst TOGGLE_IS_FOLLOWING = 'TOGGLE_IS_FOLLOWING';\nconst initialState = {\n  users: [],\n  pageSize: 100,\n  totalUsersCount: 0,\n  currentPage: 1,\n  isFetching: false,\n  followingInProgress: []\n};\nexport const usersReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case FOLLOW:\n      return { ...state,\n        users: state.users.map(u => {\n          if (u.id === action.userID) {\n            return { ...u,\n              followed: true\n            };\n          }\n\n          return u;\n        })\n      };\n\n    case UNFOLLOW:\n      return { ...state,\n        users: state.users.map(u => {\n          if (u.id === action.userID) {\n            return { ...u,\n              followed: false\n            };\n          }\n\n          return u;\n        })\n      };\n\n    case SET_USERS:\n      return { ...state,\n        users: [...action.users, ...state.users]\n      };\n\n    case SET_CURRENT_PAGE:\n      return { ...state,\n        currentPage: action.currentPage\n      };\n\n    case SET_TOTAL_COUNT:\n      return { ...state,\n        totalUsersCount: action.count\n      };\n\n    case TOGGLE_IS_FETCHING:\n      return { ...state,\n        isFetching: action.isFetching\n      };\n\n    case TOGGLE_IS_FOLLOWING:\n      return { ...state,\n        followingInProgress: action.followingInProgress ? [...state.followingInProgress, action.userId] : state.followingInProgress.filter(id => id != action.userId)\n      };\n\n    default:\n      return state;\n  }\n};\nexport const followSuccess = userID => {\n  return {\n    type: FOLLOW,\n    userID: userID\n  };\n};\nexport const unfollowSuccess = userID => {\n  return {\n    type: UNFOLLOW,\n    userID: userID\n  };\n};\nexport const setUsers = users => {\n  return {\n    type: SET_USERS,\n    users: users\n  };\n};\nexport const setCurrentPage = currentPage => {\n  return {\n    type: SET_CURRENT_PAGE,\n    currentPage: currentPage\n  };\n};\nexport const setTotalCount = totalUsersCount => {\n  return {\n    type: SET_TOTAL_COUNT,\n    count: totalUsersCount\n  };\n};\nexport const setIsFetching = isFetching => {\n  return {\n    type: TOGGLE_IS_FETCHING,\n    isFetching\n  };\n};\nexport const setIsFollowing = (followingInProgress, userId) => {\n  return {\n    type: TOGGLE_IS_FOLLOWING,\n    followingInProgress,\n    userId\n  };\n};\nexport const getUser = (currentPage, pageSize) => {\n  return dispatch => {\n    dispatch(setIsFetching(true));\n    usersAPI.getUsersData(currentPage, pageSize).then(data => {\n      dispatch(setIsFetching(false));\n      dispatch(setUsers(data.items));\n      dispatch(setTotalCount(data.totalCount));\n    });\n  };\n};\nexport const unfollow = userId => {\n  return dispatch => {\n    dispatch(setIsFollowing(true, userId));\n    followAPI.unfollowUsers(userId).then(response => {\n      if (response.data.resultCode === 0) {\n        dispatch(unfollowSuccess(userId));\n      }\n\n      dispatch(setIsFollowing(false, userId));\n    });\n  };\n};\nexport const follow = userId => {\n  return dispatch => {\n    dispatch(setIsFollowing(true, userId));\n    followAPI.followUsers(userId).then(response => {\n      if (response.data.resultCode === 0) {\n        dispatch(followSuccess(userId));\n      }\n\n      dispatch(setIsFollowing(false, userId));\n    });\n  };\n};\nexport const authUser = () => {\n  return dispatch => {\n    authMe().then(response => {\n      if (response.data.resultCode === 0) {\n        let {\n          id,\n          email,\n          login\n        } = response.data.data;\n        dispatch(setUserData(id, email, login));\n        console.log(id, email, login);\n      }\n    });\n  };\n};","map":{"version":3,"sources":["/Users/eduardanaida/Documents/GitHub/-samurai-way/samurai-way/src/redux/usersReducer.ts"],"names":["authMe","followAPI","usersAPI","setUserData","FOLLOW","UNFOLLOW","SET_USERS","SET_CURRENT_PAGE","SET_TOTAL_COUNT","TOGGLE_IS_FETCHING","TOGGLE_IS_FOLLOWING","initialState","users","pageSize","totalUsersCount","currentPage","isFetching","followingInProgress","usersReducer","state","action","type","map","u","id","userID","followed","count","userId","filter","followSuccess","unfollowSuccess","setUsers","setCurrentPage","setTotalCount","setIsFetching","setIsFollowing","getUser","dispatch","getUsersData","then","data","items","totalCount","unfollow","unfollowUsers","response","resultCode","follow","followUsers","authUser","email","login","console","log"],"mappings":"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","sourcesContent":["import {authMe, followAPI, usersAPI} from \"../api/api\";\nimport {Dispatch} from \"redux\";\nimport {setUserData} from \"./authReducer\";\n\nexport type UsersReducersActionType =\n    | ReturnType<typeof followSuccess>\n    | ReturnType<typeof unfollowSuccess>\n    | ReturnType<typeof setUsers>\n    | ReturnType<typeof setCurrentPage>\n    | ReturnType<typeof setTotalCount>\n    | ReturnType<typeof setIsFetching>\n    | ReturnType<typeof setIsFollowing>\n\n\nconst FOLLOW = \"FOLLOW\";\nconst UNFOLLOW = \"UNFOLLOW\";\nconst SET_USERS = \"SET_USERS\";\nconst SET_CURRENT_PAGE = \"SET_CURRENT_PAGE\";\nconst SET_TOTAL_COUNT = 'SET_TOTAL_COUNT';\nconst TOGGLE_IS_FETCHING = 'TOGGLE_IS_FETCHING';\nconst TOGGLE_IS_FOLLOWING = 'TOGGLE_IS_FOLLOWING';\n\nexport type UsersData = {\n    id: number,\n    name: string\n    followed: boolean\n    photos: {\n        small: string,\n        large: string\n    }\n}\n\nexport type UserPropsType = {\n    users: Array<UsersData>,\n    pageSize: number,\n    totalUsersCount: number,\n    currentPage: number,\n    isFetching: boolean,\n    followingInProgress: Array<any>\n}\n\nconst initialState: UserPropsType = {\n    users: [],\n    pageSize: 100,\n    totalUsersCount: 0,\n    currentPage: 1,\n    isFetching: false,\n    followingInProgress: []\n}\n\nexport const usersReducer = (state: UserPropsType = initialState, action: UsersReducersActionType): UserPropsType => {\n\n    switch (action.type) {\n        case FOLLOW:\n            return {\n                ...state,\n                users: state.users.map(u => {\n                    if (u.id === action.userID) {\n                        return {...u, followed: true}\n                    }\n                    return u\n                })\n            }\n        case UNFOLLOW:\n            return {\n                ...state,\n                users: state.users.map(u => {\n                    if (u.id === action.userID) {\n                        return {...u, followed: false}\n                    }\n                    return u\n                })\n            }\n\n        case SET_USERS:\n            return {\n                ...state,\n                users: [...action.users, ...state.users]\n            }\n\n        case SET_CURRENT_PAGE:\n            return {\n                ...state,\n                currentPage: action.currentPage\n            }\n        case SET_TOTAL_COUNT:\n            return {\n                ...state,\n                totalUsersCount: action.count\n            }\n        case TOGGLE_IS_FETCHING:\n            return {\n                ...state,\n                isFetching: action.isFetching\n            }\n        case TOGGLE_IS_FOLLOWING:\n            return {\n                ...state,\n                followingInProgress: action.followingInProgress\n                    ? [...state.followingInProgress, action.userId]\n                    : state.followingInProgress.filter(id => id != action.userId)\n            }\n        default:\n            return state;\n    }\n};\n\nexport const followSuccess = (userID: number) => {\n    return {\n        type: FOLLOW,\n        userID: userID\n    } as const\n}\n\nexport const unfollowSuccess = (userID: number) => {\n    return {\n        type: UNFOLLOW,\n        userID: userID\n    } as const\n}\n\nexport const setUsers = (users: Array<UsersData>) => {\n    return {\n        type: SET_USERS,\n        users: users\n    } as const\n}\n\nexport const setCurrentPage = (currentPage: number) => {\n    return {\n        type: SET_CURRENT_PAGE,\n        currentPage: currentPage\n    } as const\n}\n\nexport const setTotalCount = (totalUsersCount: number) => {\n    return {\n        type: SET_TOTAL_COUNT,\n        count: totalUsersCount\n    } as const\n}\n\nexport const setIsFetching = (isFetching: boolean) => {\n    return {\n        type: TOGGLE_IS_FETCHING,\n        isFetching\n    } as const\n}\n\nexport const setIsFollowing = (followingInProgress: boolean, userId: number) => {\n    return {\n        type: TOGGLE_IS_FOLLOWING,\n        followingInProgress,\n        userId\n    } as const\n}\n\n\nexport const getUser = (currentPage: number, pageSize: number) => {\n\n    return (dispatch: Dispatch) => {\n        dispatch(setIsFetching(true));\n        usersAPI.getUsersData(currentPage, pageSize)\n            .then(data => {\n                dispatch(setIsFetching(false));\n                dispatch(setUsers(data.items));\n                dispatch(setTotalCount(data.totalCount));\n            });\n    }\n}\n\nexport const unfollow = (userId: number) => {\n    return (dispatch: Dispatch) => {\n        dispatch(setIsFollowing(true, userId))\n        followAPI.unfollowUsers(userId)\n            .then(response => {\n                if (response.data.resultCode === 0) {\n                    dispatch(unfollowSuccess(userId))\n                }\n                dispatch(setIsFollowing(false, userId))\n            })\n    }\n}\n\nexport const follow = (userId: number) => {\n    return (dispatch: Dispatch) => {\n        dispatch(setIsFollowing(true, userId))\n        followAPI.followUsers(userId)\n            .then(response => {\n                if (response.data.resultCode === 0) {\n                    dispatch(followSuccess(userId))\n                }\n                dispatch(setIsFollowing(false, userId))\n            })\n    }\n}\n\nexport const authUser = () => {\n    return (dispatch: Dispatch) => {\n        authMe()\n            .then(response => {\n                if (response.data.resultCode === 0) {\n                    let {id, email, login} = response.data.data;\n                    dispatch(setUserData(id, email, login))\n                    console.log(id, email, login)\n                }\n            });\n    }\n}\n"]},"metadata":{},"sourceType":"module"}