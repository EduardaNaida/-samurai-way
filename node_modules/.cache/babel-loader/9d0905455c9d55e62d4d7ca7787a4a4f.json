{"ast":null,"code":"const FOLLOW = \"FOLLOW\";\nconst UNFOLLOW = \"UNFOLLOW\";\nconst SET_USERS = \"SET_USERS\";\nconst SET_CURRENT_PAGE = \"SET_CURRENT_PAGE\";\nconst initialState = {\n  users: [],\n  pageSize: 5,\n  totalUsersCount: 20,\n  currentPage: 1\n};\nexport const usersReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case FOLLOW:\n      return { ...state,\n        users: state.users.map(u => {\n          if (u.id === action.userID) {\n            return { ...u,\n              followed: false\n            };\n          }\n\n          return u;\n        })\n      };\n\n    case UNFOLLOW:\n      return { ...state,\n        users: state.users.map(u => {\n          if (u.id === action.userID) {\n            return { ...u,\n              followed: true\n            };\n          }\n\n          return u;\n        })\n      };\n\n    case SET_USERS:\n      return { ...state,\n        users: [...state.users, ...action.users]\n      };\n\n    case SET_CURRENT_PAGE:\n      return { ...state,\n        currentPage: action.currentPage\n      };\n\n    default:\n      return state;\n  }\n};\nexport const Follow = userID => {\n  return {\n    type: FOLLOW,\n    userID: userID\n  };\n};\n_c = Follow;\nexport const Unfollow = userID => {\n  return {\n    type: UNFOLLOW,\n    userID: userID\n  };\n};\n_c2 = Unfollow;\nexport const SetUsers = users => {\n  return {\n    type: SET_USERS,\n    users: users\n  };\n};\n_c3 = SetUsers;\nexport const SetCurrentPage = currentPage => {\n  return {\n    type: SET_CURRENT_PAGE,\n    currentPage: currentPage\n  };\n};\n_c4 = SetCurrentPage;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"Follow\");\n$RefreshReg$(_c2, \"Unfollow\");\n$RefreshReg$(_c3, \"SetUsers\");\n$RefreshReg$(_c4, \"SetCurrentPage\");","map":{"version":3,"sources":["/Users/eduardanaida/Documents/GitHub/-samurai-way/samurai-way/src/redux/usersReducer.ts"],"names":["FOLLOW","UNFOLLOW","SET_USERS","SET_CURRENT_PAGE","initialState","users","pageSize","totalUsersCount","currentPage","usersReducer","state","action","type","map","u","id","userID","followed","Follow","Unfollow","SetUsers","SetCurrentPage"],"mappings":"AASA,MAAMA,MAAM,GAAG,QAAf;AACA,MAAMC,QAAQ,GAAG,UAAjB;AACA,MAAMC,SAAS,GAAG,WAAlB;AACA,MAAMC,gBAAgB,GAAG,kBAAzB;AAgBA,MAAMC,YAA2B,GAAG;AAChCC,EAAAA,KAAK,EAAE,EADyB;AAEhCC,EAAAA,QAAQ,EAAE,CAFsB;AAGhCC,EAAAA,eAAe,EAAE,EAHe;AAIhCC,EAAAA,WAAW,EAAE;AAJmB,CAApC;AAOA,OAAO,MAAMC,YAAY,GAAG,YAAyF;AAAA,MAAxFC,KAAwF,uEAAjEN,YAAiE;AAAA,MAAnDO,MAAmD;;AAEjH,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKZ,MAAL;AACI,aAAO,EACH,GAAGU,KADA;AAEHL,QAAAA,KAAK,EAAEK,KAAK,CAACL,KAAN,CAAYQ,GAAZ,CAAgBC,CAAC,IAAI;AACxB,cAAIA,CAAC,CAACC,EAAF,KAASJ,MAAM,CAACK,MAApB,EAA4B;AACxB,mBAAO,EAAC,GAAGF,CAAJ;AAAOG,cAAAA,QAAQ,EAAE;AAAjB,aAAP;AACH;;AACD,iBAAOH,CAAP;AACH,SALM;AAFJ,OAAP;;AASJ,SAAKb,QAAL;AACI,aAAO,EACH,GAAGS,KADA;AAEHL,QAAAA,KAAK,EAAEK,KAAK,CAACL,KAAN,CAAYQ,GAAZ,CAAgBC,CAAC,IAAI;AACxB,cAAIA,CAAC,CAACC,EAAF,KAASJ,MAAM,CAACK,MAApB,EAA4B;AACxB,mBAAO,EAAC,GAAGF,CAAJ;AAAOG,cAAAA,QAAQ,EAAE;AAAjB,aAAP;AACH;;AACD,iBAAOH,CAAP;AACH,SALM;AAFJ,OAAP;;AAUJ,SAAKZ,SAAL;AACI,aAAO,EACH,GAAGQ,KADA;AAEHL,QAAAA,KAAK,EAAE,CAAC,GAAGK,KAAK,CAACL,KAAV,EAAiB,GAAGM,MAAM,CAACN,KAA3B;AAFJ,OAAP;;AAKJ,SAAKF,gBAAL;AACI,aAAO,EACH,GAAGO,KADA;AAEHF,QAAAA,WAAW,EAAEG,MAAM,CAACH;AAFjB,OAAP;;AAIJ;AACI,aAAOE,KAAP;AAlCR;AAoCH,CAtCM;AAwCP,OAAO,MAAMQ,MAAM,GAAIF,MAAD,IAAoB;AACtC,SAAO;AACHJ,IAAAA,IAAI,EAAEZ,MADH;AAEHgB,IAAAA,MAAM,EAAEA;AAFL,GAAP;AAIH,CALM;KAAME,M;AAOb,OAAO,MAAMC,QAAQ,GAAIH,MAAD,IAAoB;AACxC,SAAO;AACHJ,IAAAA,IAAI,EAAEX,QADH;AAEHe,IAAAA,MAAM,EAAEA;AAFL,GAAP;AAIH,CALM;MAAMG,Q;AAOb,OAAO,MAAMC,QAAQ,GAAIf,KAAD,IAA6B;AACjD,SAAO;AACHO,IAAAA,IAAI,EAAEV,SADH;AAEHG,IAAAA,KAAK,EAAEA;AAFJ,GAAP;AAIH,CALM;MAAMe,Q;AAOb,OAAQ,MAAMC,cAAc,GAAIb,WAAD,IAA0B;AACvD,SAAO;AACHI,IAAAA,IAAI,EAAET,gBADH;AAEHK,IAAAA,WAAW,EAAEA;AAFV,GAAP;AAID,CALO;MAAMa,c","sourcesContent":["import React from 'react';\n\nexport type UsersReducersActionType =\n    | ReturnType<typeof Follow>\n    | ReturnType<typeof Unfollow>\n    | ReturnType<typeof SetUsers>\n    | ReturnType<typeof SetCurrentPage>\n\n\nconst FOLLOW = \"FOLLOW\";\nconst UNFOLLOW = \"UNFOLLOW\";\nconst SET_USERS = \"SET_USERS\";\nconst SET_CURRENT_PAGE = \"SET_CURRENT_PAGE\";\n\nexport type UsersData = {\n    id: number,\n    name: string\n    followed: boolean\n    avatar: string\n}\n\nexport type UserPropsType = {\n    users: Array<UsersData>,\n    pageSize: number,\n    totalUsersCount: number,\n    currentPage: number\n}\n\nconst initialState: UserPropsType = {\n    users: [],\n    pageSize: 5,\n    totalUsersCount: 20,\n    currentPage: 1\n}\n\nexport const usersReducer = (state: UserPropsType = initialState, action: UsersReducersActionType): UserPropsType => {\n\n    switch (action.type) {\n        case FOLLOW:\n            return {\n                ...state,\n                users: state.users.map(u => {\n                    if (u.id === action.userID) {\n                        return {...u, followed: false}\n                    }\n                    return u\n                })\n            }\n        case UNFOLLOW:\n            return {\n                ...state,\n                users: state.users.map(u => {\n                    if (u.id === action.userID) {\n                        return {...u, followed: true}\n                    }\n                    return u\n                })\n            }\n\n        case SET_USERS:\n            return {\n                ...state,\n                users: [...state.users, ...action.users]\n            }\n\n        case SET_CURRENT_PAGE:\n            return {\n                ...state,\n                currentPage: action.currentPage\n            }\n        default:\n            return state;\n    }\n};\n\nexport const Follow = (userID: number) => {\n    return {\n        type: FOLLOW,\n        userID: userID\n    } as const\n}\n\nexport const Unfollow = (userID: number) => {\n    return {\n        type: UNFOLLOW,\n        userID: userID\n    } as const\n}\n\nexport const SetUsers = (users: Array<UsersData>) => {\n    return {\n        type: SET_USERS,\n        users: users\n    } as const\n}\n\nexport  const SetCurrentPage = (currentPage: number ) => {\n  return {\n      type: SET_CURRENT_PAGE,\n      currentPage: currentPage\n  } as const\n}"]},"metadata":{},"sourceType":"module"}