{"ast":null,"code":"import { AddMessage, NewMessage } from \"../../redux/dialogsReducer\";\nimport { Dialogs } from \"./Dialogs\";\nimport { connect } from \"react-redux\";\nimport withAuthRedirect from \"../../hoc/WithAuthRedirect\"; // type DialogsType = {\n//     store: StoreType\n// }\n\n/*\nexport const DialogsContainer = (props: DialogsType) => {\n    let state = props.store.getState();\n\n    const addMessage = () => {\n        props.store.dispatch(AddMessage(state.dialogsPage.newMessage));\n    }\n\n    const onChangeMessage = (newMessage: string) => {\n        props.store.dispatch(NewMessage(newMessage))\n    }\n\n    return (\n\n        <div className={s.dialogs}>\n            <Dialogs addMessage={addMessage}\n                     onChangeMessage={onChangeMessage}\n                     dialogsPage={state.dialogsPage}/>\n\n        </div>\n    );\n};\n*/\n\nlet mapStateToProps = state => {\n  return {\n    dialogsPage: state.dialogsPage,\n    newMessage: state.dialogsPage.newMessage,\n    isAuth: state.auth.isAuth\n  };\n};\n\nlet mapDispatchToProps = dispatch => {\n  return {\n    addMessage: text => {\n      dispatch(AddMessage(text));\n    },\n    onChangeMessage: newMessage => {\n      dispatch(NewMessage(newMessage));\n    }\n  };\n};\n\nconst AuthRedirectComponent = withAuthRedirect(Dialogs);\n_c = AuthRedirectComponent;\nexport const DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(AuthRedirectComponent);\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthRedirectComponent\");","map":{"version":3,"sources":["/Users/eduardanaida/Documents/GitHub/-samurai-way/samurai-way/src/components/Dialogs/DialogsContainer.tsx"],"names":["AddMessage","NewMessage","Dialogs","connect","withAuthRedirect","mapStateToProps","state","dialogsPage","newMessage","isAuth","auth","mapDispatchToProps","dispatch","addMessage","text","onChangeMessage","AuthRedirectComponent","DialogsContainer"],"mappings":"AACA,SAAQA,UAAR,EAAqCC,UAArC,QAAsD,4BAAtD;AACA,SAAQC,OAAR,QAAsB,WAAtB;AACA,SAAQC,OAAR,QAAsB,aAAtB;AAIA,OAAOC,gBAAP,MAA6B,4BAA7B,C,CAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAeA,IAAIC,eAAe,GAAIC,KAAD,IAA4C;AAC9D,SAAO;AACHC,IAAAA,WAAW,EAAED,KAAK,CAACC,WADhB;AAEHC,IAAAA,UAAU,EAAEF,KAAK,CAACC,WAAN,CAAkBC,UAF3B;AAGHC,IAAAA,MAAM,EAAEH,KAAK,CAACI,IAAN,CAAWD;AAHhB,GAAP;AAKH,CAND;;AAOA,IAAIE,kBAAkB,GAAIC,QAAD,IAA8C;AACnE,SAAO;AACHC,IAAAA,UAAU,EAAGC,IAAD,IAAkB;AAC1BF,MAAAA,QAAQ,CAACZ,UAAU,CAACc,IAAD,CAAX,CAAR;AACH,KAHE;AAIHC,IAAAA,eAAe,EAAGP,UAAD,IAAwB;AACrCI,MAAAA,QAAQ,CAACX,UAAU,CAACO,UAAD,CAAX,CAAR;AACH;AANE,GAAP;AAQH,CATD;;AAWA,MAAMQ,qBAAqB,GAAGZ,gBAAgB,CAACF,OAAD,CAA9C;KAAMc,qB;AAGN,OAAO,MAAMC,gBAAgB,GAAGd,OAAO,CAACE,eAAD,EAAkBM,kBAAlB,CAAP,CAA6CK,qBAA7C,CAAzB","sourcesContent":["import React from 'react';\nimport {AddMessage, DialogsPageType, NewMessage} from \"../../redux/dialogsReducer\";\nimport {Dialogs} from \"./Dialogs\";\nimport {connect} from \"react-redux\";\nimport {Dispatch} from \"redux\";\nimport {AppStateType} from \"../../redux/redux-store\";\nimport {Redirect} from \"react-router-dom\";\nimport withAuthRedirect from \"../../hoc/WithAuthRedirect\";\n\n// type DialogsType = {\n//     store: StoreType\n// }\n\n/*\nexport const DialogsContainer = (props: DialogsType) => {\n    let state = props.store.getState();\n\n    const addMessage = () => {\n        props.store.dispatch(AddMessage(state.dialogsPage.newMessage));\n    }\n\n    const onChangeMessage = (newMessage: string) => {\n        props.store.dispatch(NewMessage(newMessage))\n    }\n\n    return (\n\n        <div className={s.dialogs}>\n            <Dialogs addMessage={addMessage}\n                     onChangeMessage={onChangeMessage}\n                     dialogsPage={state.dialogsPage}/>\n\n        </div>\n    );\n};\n*/\n\ntype MapStatePropsType = {\n    dialogsPage: DialogsPageType\n    newMessage: string\n    isAuth: boolean\n}\n\ntype MapDispatchPropsType = {\n    addMessage: (text: string) => void\n    onChangeMessage: (newMessage: string) => void\n}\n\nexport type DialogsPropsType = MapStatePropsType & MapDispatchPropsType\n\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\n    return {\n        dialogsPage: state.dialogsPage,\n        newMessage: state.dialogsPage.newMessage,\n        isAuth: state.auth.isAuth\n    }\n}\nlet mapDispatchToProps = (dispatch: Dispatch): MapDispatchPropsType => {\n    return {\n        addMessage: (text: string) => {\n            dispatch(AddMessage(text));\n        },\n        onChangeMessage: (newMessage: string) => {\n            dispatch(NewMessage(newMessage))\n        }\n    }\n}\n\nconst AuthRedirectComponent = withAuthRedirect(Dialogs)\n\n\nexport const DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(AuthRedirectComponent);\n"]},"metadata":{},"sourceType":"module"}