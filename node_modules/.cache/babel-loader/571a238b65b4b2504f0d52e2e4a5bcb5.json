{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { applyMiddleware, combineReducers, legacy_createStore as createStore } from \"redux\";\nimport { profileReducer } from \"./profileReducer\";\nimport { dialogsReducer } from \"./dialogsReducer\";\nimport { sidebarReducer } from \"./sidebarReducer\";\nimport { usersReducer } from \"./usersReducer\";\nimport { authReducer } from \"./authReducer\";\nimport thunkMiddleware from 'redux-thunk';\nimport { reducer as formReducer } from \"redux-form\";\nimport { useDispatch } from \"react-redux\";\nlet reducers = combineReducers({\n  profilePage: profileReducer,\n  dialogsPage: dialogsReducer,\n  sidebar: sidebarReducer,\n  usersPage: usersReducer,\n  auth: authReducer,\n  form: formReducer\n});\nexport const AppDispatch = () => {\n  _s();\n\n  return useDispatch();\n};\n\n_s(AppDispatch, \"jI3HA1r1Cumjdbu14H7G+TUj798=\", false, function () {\n  return [useDispatch];\n});\n\n_c = AppDispatch;\nexport const store = createStore(reducers, applyMiddleware(thunkMiddleware));\n\nvar _c;\n\n$RefreshReg$(_c, \"AppDispatch\");","map":{"version":3,"sources":["/Users/eduardanaida/Documents/GitHub/-samurai-way/samurai-way/src/redux/redux-store.ts"],"names":["applyMiddleware","combineReducers","legacy_createStore","createStore","profileReducer","dialogsReducer","sidebarReducer","usersReducer","authReducer","thunkMiddleware","reducer","formReducer","useDispatch","reducers","profilePage","dialogsPage","sidebar","usersPage","auth","form","AppDispatch","store"],"mappings":";;AAAA,SAAmBA,eAAnB,EAAoCC,eAApC,EAAqDC,kBAAkB,IAAIC,WAA3E,QAA6F,OAA7F;AACA,SAAQC,cAAR,QAA6B,kBAA7B;AACA,SAAQC,cAAR,QAA6B,kBAA7B;AACA,SAAQC,cAAR,QAA6B,kBAA7B;AACA,SAAQC,YAAR,QAA2B,gBAA3B;AACA,SAAQC,WAAR,QAA0B,eAA1B;AACA,OAAOC,eAAP,MAA6C,aAA7C;AACA,SAAQC,OAAO,IAAIC,WAAnB,QAAqC,YAArC;AACA,SAAQC,WAAR,QAA0B,aAA1B;AAEA,IAAIC,QAAQ,GAAGZ,eAAe,CAAC;AAC3Ba,EAAAA,WAAW,EAAEV,cADc;AAE3BW,EAAAA,WAAW,EAAEV,cAFc;AAG3BW,EAAAA,OAAO,EAAEV,cAHkB;AAI3BW,EAAAA,SAAS,EAAEV,YAJgB;AAK3BW,EAAAA,IAAI,EAAEV,WALqB;AAM3BW,EAAAA,IAAI,EAAER;AANqB,CAAD,CAA9B;AAaA,OAAO,MAAMS,WAAW,GAAG;AAAA;;AAAA,SAAMR,WAAW,EAAjB;AAAA,CAApB;;GAAMQ,W;UAAoBR,W;;;KAApBQ,W;AAIb,OAAO,MAAMC,KAAK,GAAGlB,WAAW,CAACU,QAAD,EAAWb,eAAe,CAACS,eAAD,CAA1B,CAAzB","sourcesContent":["import {AnyAction, applyMiddleware, combineReducers, legacy_createStore as createStore} from \"redux\";\nimport {profileReducer} from \"./profileReducer\";\nimport {dialogsReducer} from \"./dialogsReducer\";\nimport {sidebarReducer} from \"./sidebarReducer\";\nimport {usersReducer} from \"./usersReducer\";\nimport {authReducer} from \"./authReducer\";\nimport thunkMiddleware, {ThunkDispatch} from 'redux-thunk'\nimport {reducer as formReducer} from \"redux-form\";\nimport {useDispatch} from \"react-redux\";\n\nlet reducers = combineReducers({\n    profilePage: profileReducer,\n    dialogsPage: dialogsReducer,\n    sidebar: sidebarReducer,\n    usersPage: usersReducer,\n    auth: authReducer,\n    form: formReducer\n})\n\nexport type AppStateType = ReturnType<typeof reducers>;\n\ntype AppDispatchType = ThunkDispatch<AppStateType, any, AnyAction>\n\nexport const AppDispatch = () => useDispatch<AppDispatchType>()\n\nexport type DispatchType = ReturnType<typeof AppDispatch>\n\nexport const store = createStore(reducers, applyMiddleware(thunkMiddleware))"]},"metadata":{},"sourceType":"module"}