{"ast":null,"code":"var _jsxFileName = \"/Users/eduardanaida/Documents/GitHub/-samurai-way/samurai-way/src/components/Users/UsersContainer.tsx\";\nimport React from 'react';\nimport { connect } from \"react-redux\";\nimport { follow, setCurrentPage, setIsFetching, setTotalCount, setUsers, unfollow } from \"../../redux/usersReducer\";\nimport axios from \"axios\";\nimport Users from \"./Users\";\nimport Preloader from \"../common/preloader/Preloder\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport class UsersAPIComponent extends React.Component {\n  constructor() {\n    super(...arguments);\n\n    this.onPageChanged = pageNumber => {\n      this.props.setCurrentPage(pageNumber);\n      this.props.setIsFetching(true);\n      axios.get(`https://social-network.samuraijs.com/api/1.0/users?page=${pageNumber}&count=${this.props.pageSize}`).then(response => {\n        this.props.setIsFetching(false);\n        this.props.setUsers(response.data.items);\n        this.props.setTotalCount(response.data.totalCount);\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.props.setIsFetching(true);\n    axios.get(`https://social-network.samuraijs.com/api/1.0/users?page=${this.props.currentPage}&count=${this.props.pageSize}`).then(response => {\n      this.props.setIsFetching(false);\n      this.props.setUsers(response.data.items);\n      this.props.setTotalCount(response.data.totalCount);\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [this.props.isFetching ? /*#__PURE__*/_jsxDEV(Preloader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 38\n      }, this) : null, /*#__PURE__*/_jsxDEV(Users, {\n        totalUsersCount: this.props.totalUsersCount,\n        usersPage: this.props.usersPage,\n        pageSize: this.props.pageSize,\n        currentPage: this.props.currentPage,\n        follow: this.props.follow,\n        unfollow: this.props.unfollow,\n        setUsers: this.props.setUsers,\n        setCurrentPage: this.props.setCurrentPage,\n        setTotalCount: this.props.setTotalCount,\n        onPageChanged: this.onPageChanged\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n;\n\nlet mapStateToProps = state => {\n  console.log(state.usersPage.totalUsersCount);\n  return {\n    usersPage: state.usersPage.users,\n    pageSize: state.usersPage.pageSize,\n    totalUsersCount: state.usersPage.totalUsersCount,\n    currentPage: state.usersPage.currentPage,\n    isFetching: state.usersPage.isFetching\n  };\n}; // let mapDispatchToProps = (dispatch: Dispatch): MapDispatchPropsType => {\n//     return {\n//         follow: (userId: number) => {\n//             dispatch(follow(userId));\n//         },\n//         unfollow: (userId: number) => {\n//             dispatch(unfollow(userId));\n//         },\n//         setUsers: (users: any) => {\n//             dispatch(setUsers(users));\n//         },\n//         setCurrentPage: (currentPage: number) => {\n//             dispatch(setCurrentPage(currentPage))\n//         },\n//         setTotalCount: (count: number) => {\n//             dispatch(setTotalCount(count))\n//         },\n//         setIsFetching: (isFetching: boolean) => {\n//             dispatch(setIsFetching(isFetching))\n//         }\n//     }\n// }\n\n\nexport const UsersContainer = connect(mapStateToProps, {\n  follow,\n  unfollow,\n  setUsers,\n  setCurrentPage,\n  setTotalCount,\n  setIsFetching\n})(UsersAPIComponent);","map":{"version":3,"sources":["/Users/eduardanaida/Documents/GitHub/-samurai-way/samurai-way/src/components/Users/UsersContainer.tsx"],"names":["React","connect","follow","setCurrentPage","setIsFetching","setTotalCount","setUsers","unfollow","axios","Users","Preloader","UsersAPIComponent","Component","onPageChanged","pageNumber","props","get","pageSize","then","response","data","items","totalCount","componentDidMount","currentPage","render","isFetching","totalUsersCount","usersPage","mapStateToProps","state","console","log","users","UsersContainer"],"mappings":"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","sourcesContent":["import React from 'react';\nimport styles from \"./Users.module.css\";\nimport {connect} from \"react-redux\";\nimport {\n    follow,\n    setCurrentPage, setIsFetching,\n    setTotalCount,\n    setUsers,\n    unfollow,\n    UsersData\n} from \"../../redux/usersReducer\";\nimport {AppStateType} from \"../../redux/redux-store\";\nimport axios from \"axios\";\nimport Users from \"./Users\";\nimport Preloader from \"../common/preloader/Preloder\";\n\ntype MapStatePropsType = {\n    usersPage: UsersData[]\n    pageSize: number\n    totalUsersCount: number\n    currentPage: number\n    isFetching: boolean\n}\n\ntype MapDispatchPropsType = {\n    follow: (userId: number) => void\n    unfollow: (userId: number) => void\n    setUsers: (users: any) => void\n    setCurrentPage: (currentPage: number) => void\n    setTotalCount: (totalUsersCount: number) => void\n    setIsFetching: (isFetching: boolean) => void\n}\n\nexport type UsersPagePropsType = MapStatePropsType & MapDispatchPropsType\n\n\nexport class UsersAPIComponent extends React.Component<UsersPagePropsType> {\n\n    componentDidMount() {\n        this.props.setIsFetching(true)\n        axios.get(`https://social-network.samuraijs.com/api/1.0/users?page=${this.props.currentPage}&count=${this.props.pageSize}`).then(response => {\n            this.props.setIsFetching(false)\n            this.props.setUsers(response.data.items);\n            this.props.setTotalCount(response.data.totalCount)\n        });\n    }\n\n    onPageChanged = (pageNumber: number) => {\n        this.props.setCurrentPage(pageNumber);\n        this.props.setIsFetching(true)\n        axios.get(`https://social-network.samuraijs.com/api/1.0/users?page=${pageNumber}&count=${this.props.pageSize}`).then(response => {\n            this.props.setIsFetching(false)\n            this.props.setUsers(response.data.items);\n            this.props.setTotalCount(response.data.totalCount)\n        });\n    }\n\n    render() {\n\n        return <>\n            {this.props.isFetching ? <Preloader/> : null}\n            <Users totalUsersCount={this.props.totalUsersCount}\n                   usersPage={this.props.usersPage}\n                   pageSize={this.props.pageSize}\n                   currentPage={this.props.currentPage}\n                   follow={this.props.follow}\n                   unfollow={this.props.unfollow}\n                   setUsers={this.props.setUsers}\n                   setCurrentPage={this.props.setCurrentPage}\n                   setTotalCount={this.props.setTotalCount}\n                   onPageChanged={this.onPageChanged}\n            />\n        </>\n    }\n\n};\n\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\n    console.log(state.usersPage.totalUsersCount)\n\n    return {\n        usersPage: state.usersPage.users,\n        pageSize: state.usersPage.pageSize,\n        totalUsersCount: state.usersPage.totalUsersCount,\n        currentPage: state.usersPage.currentPage,\n        isFetching: state.usersPage.isFetching\n    }\n}\n// let mapDispatchToProps = (dispatch: Dispatch): MapDispatchPropsType => {\n//     return {\n//         follow: (userId: number) => {\n//             dispatch(follow(userId));\n//         },\n//         unfollow: (userId: number) => {\n//             dispatch(unfollow(userId));\n//         },\n//         setUsers: (users: any) => {\n//             dispatch(setUsers(users));\n//         },\n//         setCurrentPage: (currentPage: number) => {\n//             dispatch(setCurrentPage(currentPage))\n//         },\n//         setTotalCount: (count: number) => {\n//             dispatch(setTotalCount(count))\n//         },\n//         setIsFetching: (isFetching: boolean) => {\n//             dispatch(setIsFetching(isFetching))\n//         }\n//     }\n// }\n\nexport const UsersContainer = connect(mapStateToProps,\n    {\n        follow,\n        unfollow,\n        setUsers,\n        setCurrentPage,\n        setTotalCount,\n        setIsFetching\n    })(UsersAPIComponent);\n"]},"metadata":{},"sourceType":"module"}