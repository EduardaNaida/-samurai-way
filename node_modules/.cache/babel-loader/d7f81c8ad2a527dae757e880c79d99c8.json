{"ast":null,"code":"var _jsxFileName = \"/Users/eduardanaida/Documents/GitHub/-samurai-way/samurai-way/src/components/Users/UsersContainer.tsx\";\nimport React from 'react';\nimport { connect } from \"react-redux\";\nimport { Follow, SetCurrentPage, SetIsFetching, SetTotalCount, SetUsers, Unfollow } from \"../../redux/usersReducer\";\nimport axios from \"axios\";\nimport Users from \"./Users\";\nimport Preloader from \"../common/preloader/Preloder\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport class UsersAPIComponent extends React.Component {\n  constructor() {\n    super(...arguments);\n\n    this.onPageChanged = pageNumber => {\n      this.props.setCurrentPage(pageNumber);\n      this.props.toggleIsFetching(true);\n      axios.get(`https://social-network.samuraijs.com/api/1.0/users?page=${pageNumber}&count=${this.props.pageSize}`).then(response => {\n        this.props.toggleIsFetching(false);\n        this.props.setUsers(response.data.items);\n        this.props.setTotalCount(response.data.totalCount);\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.props.toggleIsFetching(true);\n    axios.get(`https://social-network.samuraijs.com/api/1.0/users?page=${this.props.currentPage}&count=${this.props.pageSize}`).then(response => {\n      this.props.toggleIsFetching(false);\n      this.props.setUsers(response.data.items);\n      this.props.setTotalCount(response.data.totalCount);\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [this.props.isFetching ? /*#__PURE__*/_jsxDEV(Preloader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 40\n      }, this) : null, /*#__PURE__*/_jsxDEV(Users, {\n        totalUsersCount: this.props.totalUsersCount,\n        usersPage: this.props.usersPage,\n        pageSize: this.props.pageSize,\n        currentPage: this.props.currentPage,\n        follow: this.props.follow,\n        unfollow: this.props.unfollow,\n        setUsers: this.props.setUsers,\n        setCurrentPage: this.props.setCurrentPage,\n        setTotalCount: this.props.setTotalCount,\n        onPageChanged: this.onPageChanged\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n;\n\nlet mapStateToProps = state => {\n  console.log(state.usersPage.totalUsersCount);\n  return {\n    usersPage: state.usersPage.users,\n    pageSize: state.usersPage.pageSize,\n    totalUsersCount: state.usersPage.totalUsersCount,\n    currentPage: state.usersPage.currentPage,\n    isFetching: state.usersPage.isFetching\n  };\n};\n\nlet mapDispatchToProps = dispatch => {\n  return {\n    follow: userId => {\n      dispatch(Follow(userId));\n    },\n    unfollow: userId => {\n      dispatch(Unfollow(userId));\n    },\n    setUsers: users => {\n      dispatch(SetUsers(users));\n    },\n    setCurrentPage: currentPage => {\n      dispatch(SetCurrentPage(currentPage));\n    },\n    setTotalCount: count => {\n      dispatch(SetTotalCount(count));\n    },\n    toggleIsFetching: isFetching => {\n      dispatch(SetIsFetching(isFetching));\n    }\n  };\n};\n\nexport const UsersContainer = connect(mapStateToProps, mapDispatchToProps)(UsersAPIComponent);","map":{"version":3,"sources":["/Users/eduardanaida/Documents/GitHub/-samurai-way/samurai-way/src/components/Users/UsersContainer.tsx"],"names":["React","connect","Follow","SetCurrentPage","SetIsFetching","SetTotalCount","SetUsers","Unfollow","axios","Users","Preloader","UsersAPIComponent","Component","onPageChanged","pageNumber","props","setCurrentPage","toggleIsFetching","get","pageSize","then","response","setUsers","data","items","setTotalCount","totalCount","componentDidMount","currentPage","render","isFetching","totalUsersCount","usersPage","follow","unfollow","mapStateToProps","state","console","log","users","mapDispatchToProps","dispatch","userId","count","UsersContainer"],"mappings":"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","sourcesContent":["import React from 'react';\nimport styles from \"./Users.module.css\";\nimport {connect} from \"react-redux\";\nimport {\n    Follow,\n    SetCurrentPage, SetIsFetching,\n    SetTotalCount,\n    SetUsers,\n    Unfollow,\n    UsersData\n} from \"../../redux/usersReducer\";\nimport {AppStateType} from \"../../redux/redux-store\";\nimport {Dispatch} from \"redux\";\nimport axios from \"axios\";\nimport Users from \"./Users\";\nimport Preloader from \"../common/preloader/Preloder\";\n\ntype MapStatePropsType = {\n    usersPage: UsersData[]\n    pageSize: number\n    totalUsersCount: number\n    currentPage: number\n    isFetching: boolean\n}\n\ntype MapDispatchPropsType = {\n    follow: (userId: number) => void\n    unfollow: (userId: number) => void\n    setUsers: (users: any) => void\n    setCurrentPage: (currentPage: number) => void\n    setTotalCount: (totalUsersCount: number) => void\n    toggleIsFetching: (isFetching: boolean) => void\n}\n\nexport type UsersPagePropsType = MapStatePropsType & MapDispatchPropsType\n\n\nexport class UsersAPIComponent extends React.Component<UsersPagePropsType> {\n\n    componentDidMount() {\n        this.props.toggleIsFetching(true)\n        axios.get(`https://social-network.samuraijs.com/api/1.0/users?page=${this.props.currentPage}&count=${this.props.pageSize}`).then(response => {\n            this.props.toggleIsFetching(false)\n            this.props.setUsers(response.data.items);\n            this.props.setTotalCount(response.data.totalCount)\n        });\n    }\n\n    onPageChanged = (pageNumber: number) => {\n        this.props.setCurrentPage(pageNumber);\n        this.props.toggleIsFetching(true)\n        axios.get(`https://social-network.samuraijs.com/api/1.0/users?page=${pageNumber}&count=${this.props.pageSize}`).then(response => {\n            this.props.toggleIsFetching(false)\n            this.props.setUsers(response.data.items);\n            this.props.setTotalCount(response.data.totalCount)\n        });\n    }\n\n    render() {\n\n        return <>\n            {this.props.isFetching ?   <Preloader />  : null}\n            <Users totalUsersCount={this.props.totalUsersCount}\n                   usersPage={this.props.usersPage}\n                   pageSize={this.props.pageSize}\n                   currentPage={this.props.currentPage}\n                   follow={this.props.follow}\n                   unfollow={this.props.unfollow}\n                   setUsers={this.props.setUsers}\n                   setCurrentPage={this.props.setCurrentPage}\n                   setTotalCount={this.props.setTotalCount}\n                   onPageChanged={this.onPageChanged}\n            />\n        </>\n    }\n\n};\n\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\n    console.log(state.usersPage.totalUsersCount)\n\n    return {\n        usersPage: state.usersPage.users,\n        pageSize: state.usersPage.pageSize,\n        totalUsersCount: state.usersPage.totalUsersCount,\n        currentPage: state.usersPage.currentPage,\n        isFetching: state.usersPage.isFetching\n    }\n}\nlet mapDispatchToProps = (dispatch: Dispatch): MapDispatchPropsType => {\n    return {\n        follow: (userId: number) => {\n            dispatch(Follow(userId));\n        },\n        unfollow: (userId: number) => {\n            dispatch(Unfollow(userId));\n        },\n        setUsers: (users: any) => {\n            dispatch(SetUsers(users));\n        },\n        setCurrentPage: (currentPage: number) => {\n            dispatch(SetCurrentPage(currentPage))\n        },\n        setTotalCount: (count: number) => {\n            dispatch(SetTotalCount(count))\n        },\n        toggleIsFetching: (isFetching: boolean) => {\n            dispatch(SetIsFetching(isFetching))\n        }\n    }\n}\n\nexport const UsersContainer = connect(mapStateToProps, mapDispatchToProps)(UsersAPIComponent);\n"]},"metadata":{},"sourceType":"module"}