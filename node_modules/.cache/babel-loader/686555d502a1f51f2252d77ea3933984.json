{"ast":null,"code":"var _jsxFileName = \"/Users/eduardanaida/Documents/GitHub/-samurai-way/samurai-way/src/components/Users/UsersContainer.tsx\";\nimport React from 'react';\nimport { connect } from \"react-redux\";\nimport { follow, getUser, setCurrentPage, setIsFetching, setIsFollowing, setTotalCount, setUsers, unfollow } from \"../../redux/usersReducer\";\nimport Users from \"./Users\";\nimport Preloader from \"../common/preloader/Preloder\";\nimport { usersAPI } from \"../../api/api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport class UsersAPIComponent extends React.Component {\n  constructor() {\n    super(...arguments);\n\n    this.onPageChanged = pageNumber => {\n      this.props.setCurrentPage(pageNumber);\n      this.props.setIsFetching(true);\n      usersAPI.getUsersData(pageNumber, this.props.pageSize).then(data => {\n        this.props.setIsFetching(false);\n        this.props.setUsers(data.items);\n        this.props.setTotalCount(data.totalCount);\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.props.getUser(this.props.currentPage, this.props.pageSize);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [this.props.isFetching ? /*#__PURE__*/_jsxDEV(Preloader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 38\n      }, this) : null, /*#__PURE__*/_jsxDEV(Users, {\n        totalUsersCount: this.props.totalUsersCount,\n        usersPage: this.props.usersPage,\n        pageSize: this.props.pageSize,\n        currentPage: this.props.currentPage,\n        follow: this.props.follow,\n        unfollow: this.props.unfollow,\n        setUsers: this.props.setUsers,\n        setCurrentPage: this.props.setCurrentPage,\n        setTotalCount: this.props.setTotalCount,\n        onPageChanged: this.onPageChanged,\n        setIsFollowing: this.props.setIsFollowing,\n        followingInProgress: this.props.followingInProgress\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n;\n\nlet mapStateToProps = state => {\n  console.log(state.usersPage.totalUsersCount);\n  return {\n    usersPage: state.usersPage.users,\n    pageSize: state.usersPage.pageSize,\n    totalUsersCount: state.usersPage.totalUsersCount,\n    currentPage: state.usersPage.currentPage,\n    isFetching: state.usersPage.isFetching,\n    followingInProgress: state.usersPage.followingInProgress\n  };\n}; // let mapDispatchToProps = (dispatch: Dispatch): MapDispatchPropsType => {\n//     return {\n//         follow: (userId: number) => {\n//             dispatch(follow(userId));\n//         },\n//         unfollow: (userId: number) => {\n//             dispatch(unfollow(userId));\n//         },\n//         setUsers: (users: any) => {\n//             dispatch(setUsers(users));\n//         },\n//         setCurrentPage: (currentPage: number) => {\n//             dispatch(setCurrentPage(currentPage))\n//         },\n//         setTotalCount: (count: number) => {\n//             dispatch(setTotalCount(count))\n//         },\n//         setIsFetching: (isFetching: boolean) => {\n//             dispatch(setIsFetching(isFetching))\n//         }\n//     }\n// }\n\n\nexport const UsersContainer = connect(mapStateToProps, {\n  follow,\n  unfollow,\n  setUsers,\n  setCurrentPage,\n  setTotalCount,\n  setIsFetching,\n  setIsFollowing,\n  getUser\n})(UsersAPIComponent);","map":{"version":3,"sources":["/Users/eduardanaida/Documents/GitHub/-samurai-way/samurai-way/src/components/Users/UsersContainer.tsx"],"names":["React","connect","follow","getUser","setCurrentPage","setIsFetching","setIsFollowing","setTotalCount","setUsers","unfollow","Users","Preloader","usersAPI","UsersAPIComponent","Component","onPageChanged","pageNumber","props","getUsersData","pageSize","then","data","items","totalCount","componentDidMount","currentPage","render","isFetching","totalUsersCount","usersPage","followingInProgress","mapStateToProps","state","console","log","users","UsersContainer"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {connect} from \"react-redux\";\nimport {\n    follow, getUser,\n    setCurrentPage, setIsFetching, setIsFollowing,\n    setTotalCount,\n    setUsers,\n    unfollow,\n    UsersData\n} from \"../../redux/usersReducer\";\nimport {AppStateType} from \"../../redux/redux-store\";\nimport Users from \"./Users\";\nimport Preloader from \"../common/preloader/Preloder\";\nimport {usersAPI} from \"../../api/api\";\n\ntype MapStatePropsType = {\n    usersPage: UsersData[]\n    pageSize: number\n    totalUsersCount: number\n    currentPage: number\n    isFetching: boolean\n    followingInProgress: Array<any>\n}\n\ntype MapDispatchPropsType = {\n    follow: (userId: number) => void\n    unfollow: (userId: number) => void\n    setUsers: (users: any) => void\n    setCurrentPage: (currentPage: number) => void\n    setTotalCount: (totalUsersCount: number) => void\n    setIsFetching: (isFetching: boolean) => void\n    setIsFollowing: (followingInProgress: boolean, userId: number) => void\n    getUser: (currentPage: number, pageSize: number) => void\n}\n\nexport type UsersPagePropsType = MapStatePropsType & MapDispatchPropsType\n\n\nexport class UsersAPIComponent extends React.Component<UsersPagePropsType> {\n\n    componentDidMount() {\n        this.props.getUser(this.props.currentPage, this.props.pageSize)\n    }\n\n    onPageChanged = (pageNumber: number) => {\n        this.props.setCurrentPage(pageNumber);\n        this.props.setIsFetching(true)\n        usersAPI.getUsersData(pageNumber, this.props.pageSize)\n            .then(data => {\n                this.props.setIsFetching(false)\n                this.props.setUsers(data.items);\n                this.props.setTotalCount(data.totalCount)\n            });\n    }\n\n    render() {\n\n        return <>\n            {this.props.isFetching ? <Preloader/> : null}\n            <Users\n                totalUsersCount={this.props.totalUsersCount}\n                usersPage={this.props.usersPage}\n                pageSize={this.props.pageSize}\n                currentPage={this.props.currentPage}\n                follow={this.props.follow}\n                unfollow={this.props.unfollow}\n                setUsers={this.props.setUsers}\n                setCurrentPage={this.props.setCurrentPage}\n                setTotalCount={this.props.setTotalCount}\n                onPageChanged={this.onPageChanged}\n                setIsFollowing={this.props.setIsFollowing}\n                followingInProgress={this.props.followingInProgress}\n            />\n        </>\n    }\n\n};\n\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\n    console.log(state.usersPage.totalUsersCount)\n\n    return {\n        usersPage: state.usersPage.users,\n        pageSize: state.usersPage.pageSize,\n        totalUsersCount: state.usersPage.totalUsersCount,\n        currentPage: state.usersPage.currentPage,\n        isFetching: state.usersPage.isFetching,\n        followingInProgress: state.usersPage.followingInProgress\n    }\n}\n// let mapDispatchToProps = (dispatch: Dispatch): MapDispatchPropsType => {\n//     return {\n//         follow: (userId: number) => {\n//             dispatch(follow(userId));\n//         },\n//         unfollow: (userId: number) => {\n//             dispatch(unfollow(userId));\n//         },\n//         setUsers: (users: any) => {\n//             dispatch(setUsers(users));\n//         },\n//         setCurrentPage: (currentPage: number) => {\n//             dispatch(setCurrentPage(currentPage))\n//         },\n//         setTotalCount: (count: number) => {\n//             dispatch(setTotalCount(count))\n//         },\n//         setIsFetching: (isFetching: boolean) => {\n//             dispatch(setIsFetching(isFetching))\n//         }\n//     }\n// }\n\nexport const UsersContainer = connect(mapStateToProps,\n    {\n        follow,\n        unfollow,\n        setUsers,\n        setCurrentPage,\n        setTotalCount,\n        setIsFetching,\n        setIsFollowing,\n        getUser\n    })(UsersAPIComponent);\n"]},"metadata":{},"sourceType":"module"}