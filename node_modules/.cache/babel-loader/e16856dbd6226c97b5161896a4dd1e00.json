{"ast":null,"code":"import { authMe } from \"../api/api\";\nconst SET_USER_DATA = \"SET_USER_DATA\";\nconst initialState = {\n  id: null,\n  email: null,\n  login: null,\n  isAuth: false\n};\nexport const authReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case SET_USER_DATA:\n      return { ...state,\n        ...action.data,\n        isAuth: true\n      };\n\n    default:\n      return state;\n  }\n};\nexport const setUserData = (id, email, login) => ({\n  type: SET_USER_DATA,\n  data: {\n    id,\n    email,\n    login\n  }\n});\nexport const authUser = () => {\n  return dispatch => {\n    authMe().then(response => {\n      if (response.data.resultCode === 0) {\n        let {\n          id,\n          email,\n          login\n        } = response.data.data;\n        console.log(id, email, login);\n        dispatch(setUserData(id, email, login));\n      }\n    });\n  };\n};","map":{"version":3,"sources":["/Users/eduardanaida/Documents/GitHub/-samurai-way/samurai-way/src/redux/authReducer.ts"],"names":["authMe","SET_USER_DATA","initialState","id","email","login","isAuth","authReducer","state","action","type","data","setUserData","authUser","dispatch","then","response","resultCode","console","log"],"mappings":"AACA,SAAQA,MAAR,QAAqB,YAArB;AAKA,MAAMC,aAAa,GAAG,eAAtB;AASA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,EAAE,EAAE,IADa;AAEjBC,EAAAA,KAAK,EAAE,IAFU;AAGjBC,EAAAA,KAAK,EAAE,IAHU;AAIjBC,EAAAA,MAAM,EAAE;AAJS,CAArB;AAQA,OAAO,MAAMC,WAAW,GAAG,YAAsF;AAAA,MAArFC,KAAqF,uEAA/DN,YAA+D;AAAA,MAAjDO,MAAiD;;AAE7G,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKT,aAAL;AACI,aAAO,EACH,GAAGO,KADA;AAEH,WAAGC,MAAM,CAACE,IAFP;AAGHL,QAAAA,MAAM,EAAE;AAHL,OAAP;;AAKJ;AACI,aAAOE,KAAP;AARR;AAUH,CAZM;AAcP,OAAO,MAAMI,WAAW,GAAG,CAACT,EAAD,EAAaC,KAAb,EAA4BC,KAA5B,MAA+C;AAClEK,EAAAA,IAAI,EAAET,aAD4D;AAElEU,EAAAA,IAAI,EAAE;AAACR,IAAAA,EAAD;AAAKC,IAAAA,KAAL;AAAYC,IAAAA;AAAZ;AAF4D,CAA/C,CAApB;AAMP,OAAO,MAAMQ,QAAQ,GAAG,MAAM;AAC1B,SAAQC,QAAD,IAAwB;AAC3Bd,IAAAA,MAAM,GACDe,IADL,CACUC,QAAQ,IAAI;AACd,UAAIA,QAAQ,CAACL,IAAT,CAAcM,UAAd,KAA6B,CAAjC,EAAoC;AAChC,YAAI;AAACd,UAAAA,EAAD;AAAKC,UAAAA,KAAL;AAAYC,UAAAA;AAAZ,YAAqBW,QAAQ,CAACL,IAAT,CAAcA,IAAvC;AACAO,QAAAA,OAAO,CAACC,GAAR,CAAYhB,EAAZ,EAAgBC,KAAhB,EAAuBC,KAAvB;AACAS,QAAAA,QAAQ,CAACF,WAAW,CAACT,EAAD,EAAKC,KAAL,EAAYC,KAAZ,CAAZ,CAAR;AACH;AACJ,KAPL;AAQH,GATD;AAUH,CAXM","sourcesContent":["import {Dispatch} from \"redux\";\nimport {authMe} from \"../api/api\";\n\nexport type authReducersActionType =\n    | ReturnType<typeof setUserData>\n\nconst SET_USER_DATA = \"SET_USER_DATA\";\n\nexport type UserDataType = {\n    id: number | null,\n    email: string | null,\n    login: string | null\n    isAuth: boolean\n}\n\nconst initialState = {\n    id: null,\n    email: null,\n    login: null,\n    isAuth: false\n}\n\n\nexport const authReducer = (state: UserDataType = initialState, action: authReducersActionType): UserDataType => {\n\n    switch (action.type) {\n        case SET_USER_DATA:\n            return {\n                ...state,\n                ...action.data,\n                isAuth: true\n            }\n        default:\n            return state;\n    }\n};\n\nexport const setUserData = (id: number, email: string, login: string) => ({\n        type: SET_USER_DATA,\n        data: {id, email, login}\n    } as const\n)\n\nexport const authUser = () => {\n    return (dispatch: Dispatch) => {\n        authMe()\n            .then(response => {\n                if (response.data.resultCode === 0) {\n                    let {id, email, login} = response.data.data;\n                    console.log(id, email, login)\n                    dispatch(setUserData(id, email, login))\n                }\n            });\n    }\n}"]},"metadata":{},"sourceType":"module"}