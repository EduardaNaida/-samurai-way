{"ast":null,"code":"var _jsxFileName = \"/Users/eduardanaida/Documents/GitHub/-samurai-way/samurai-way/src/components/Users/UsersContainer.tsx\";\nimport React from 'react';\nimport { connect } from \"react-redux\";\nimport { Follow, SetCurrentPage, SetTotalCount, SetUsers, Unfollow } from \"../../redux/usersReducer\";\nimport axios from \"axios\";\nimport Users from \"./Users\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class UsersAPIComponent extends React.Component {\n  constructor() {\n    super(...arguments);\n\n    this.onPageChanged = pageNumber => {\n      this.props.setCurrentPage(pageNumber);\n      axios.get(`https://social-network.samuraijs.com/api/1.0/users?page=${pageNumber}&count=${this.props.pageSize}`).then(response => {\n        this.props.setUsers(response.data.items);\n        this.props.setTotalCount(response.data.totalCount);\n      });\n    };\n  }\n\n  componentDidMount() {\n    axios.get(`https://social-network.samuraijs.com/api/1.0/users?page=${this.props.currentPage}&count=${this.props.pageSize}`).then(response => {\n      this.props.setUsers(response.data.items);\n      this.props.setTotalCount(response.data.totalCount);\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Users, {\n      totalUsersCount: this.props.totalUsersCount,\n      usersPage: this.props.usersPage,\n      pageSize: this.props.pageSize,\n      currentPage: this.props.currentPage,\n      follow: this.props.follow,\n      unfollow: this.props.unfollow,\n      setUsers: this.props.setUsers,\n      setCurrentPage: this.props.setCurrentPage,\n      setTotalCount: this.props.setTotalCount,\n      onPageChanged: this.onPageChanged\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 16\n    }, this);\n  }\n\n}\n;\n\nlet mapStateToProps = state => {\n  console.log(state.usersPage.totalUsersCount);\n  return {\n    usersPage: state.usersPage.users,\n    pageSize: state.usersPage.pageSize,\n    totalUsersCount: state.usersPage.totalUsersCount,\n    currentPage: state.usersPage.currentPage,\n    isFetching: state.usersPage.isFetching\n  };\n};\n\nlet mapDispatchToProps = dispatch => {\n  return {\n    follow: userId => {\n      dispatch(Follow(userId));\n    },\n    unfollow: userId => {\n      dispatch(Unfollow(userId));\n    },\n    setUsers: users => {\n      dispatch(SetUsers(users));\n    },\n    setCurrentPage: currentPage => {\n      dispatch(SetCurrentPage(currentPage));\n    },\n    setTotalCount: count => {\n      dispatch(SetTotalCount(count));\n    }\n  };\n};\n\nexport const UsersContainer = connect(mapStateToProps, mapDispatchToProps)(UsersAPIComponent);","map":{"version":3,"sources":["/Users/eduardanaida/Documents/GitHub/-samurai-way/samurai-way/src/components/Users/UsersContainer.tsx"],"names":["React","connect","Follow","SetCurrentPage","SetTotalCount","SetUsers","Unfollow","axios","Users","UsersAPIComponent","Component","onPageChanged","pageNumber","props","setCurrentPage","get","pageSize","then","response","setUsers","data","items","setTotalCount","totalCount","componentDidMount","currentPage","render","totalUsersCount","usersPage","follow","unfollow","mapStateToProps","state","console","log","users","isFetching","mapDispatchToProps","dispatch","userId","count","UsersContainer"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {connect} from \"react-redux\";\nimport {\n    Follow,\n    SetCurrentPage,\n    SetTotalCount,\n    SetUsers,\n    Unfollow,\n    UsersData\n} from \"../../redux/usersReducer\";\nimport {AppStateType} from \"../../redux/redux-store\";\nimport {Dispatch} from \"redux\";\nimport axios from \"axios\";\nimport Users from \"./Users\";\n\ntype MapStatePropsType = {\n    usersPage: UsersData[]\n    pageSize: number\n    totalUsersCount: number\n    currentPage: number\n    isFetching: boolean\n}\n\ntype MapDispatchPropsType = {\n    follow: (userId: number) => void\n    unfollow: (userId: number) => void\n    setUsers: (users: any) => void\n    setCurrentPage: (currentPage: number) => void\n    setTotalCount: (totalUsersCount: number) => void\n}\n\nexport type UsersPagePropsType = MapStatePropsType & MapDispatchPropsType\n\n\nexport class UsersAPIComponent extends React.Component<UsersPagePropsType> {\n\n    componentDidMount() {\n        axios.get(`https://social-network.samuraijs.com/api/1.0/users?page=${this.props.currentPage}&count=${this.props.pageSize}`).then(response => {\n            this.props.setUsers(response.data.items);\n            this.props.setTotalCount(response.data.totalCount)\n        });\n    }\n\n    onPageChanged = (pageNumber: number) => {\n        this.props.setCurrentPage(pageNumber);\n        axios.get(`https://social-network.samuraijs.com/api/1.0/users?page=${pageNumber}&count=${this.props.pageSize}`).then(response => {\n            this.props.setUsers(response.data.items);\n            this.props.setTotalCount(response.data.totalCount)\n        });\n    }\n\n    render() {\n\n        return <Users\n            totalUsersCount={this.props.totalUsersCount}\n            usersPage={this.props.usersPage}\n            pageSize={this.props.pageSize}\n            currentPage={this.props.currentPage}\n            follow={this.props.follow}\n            unfollow={this.props.unfollow}\n            setUsers={this.props.setUsers}\n            setCurrentPage={this.props.setCurrentPage}\n            setTotalCount={this.props.setTotalCount}\n            onPageChanged={this.onPageChanged}\n        />\n    }\n\n};\n\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\n    console.log(state.usersPage.totalUsersCount)\n\n    return {\n        usersPage: state.usersPage.users,\n        pageSize: state.usersPage.pageSize,\n        totalUsersCount: state.usersPage.totalUsersCount,\n        currentPage: state.usersPage.currentPage,\n        isFetching: state.usersPage.isFetching\n    }\n}\nlet mapDispatchToProps = (dispatch: Dispatch): MapDispatchPropsType => {\n    return {\n        follow: (userId: number) => {\n            dispatch(Follow(userId));\n        },\n        unfollow: (userId: number) => {\n            dispatch(Unfollow(userId));\n        },\n        setUsers: (users: any) => {\n            dispatch(SetUsers(users));\n        },\n        setCurrentPage: (currentPage: number) => {\n            dispatch(SetCurrentPage(currentPage))\n        },\n        setTotalCount: (count: number) => {\n            dispatch(SetTotalCount(count))\n        }\n    }\n}\n\nexport const UsersContainer = connect(mapStateToProps, mapDispatchToProps)(UsersAPIComponent);\n"]},"metadata":{},"sourceType":"module"}