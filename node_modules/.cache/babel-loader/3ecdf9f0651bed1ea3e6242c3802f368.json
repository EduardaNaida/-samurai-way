{"ast":null,"code":"import { profileReducer } from \"./profileReducer\";\nimport { dialogsReducer } from \"./dialogsReducer\";\nimport { sidebarReducer } from \"./sidebarReducer\";\nconst ADD_POST = 'ADD-POST';\nconst NEW_POST_TEXT = 'NEW-POST-TEXT';\nconst ADD_MESSAGE = \"ADD-MESSAGE\";\nconst NEW_MESSAGE = \"NEW-MESSAGE\"; // export let state: RootStateType = {\n//     profilePage: {\n//         postData: [\n//             {name: 'Eduarda', message: 'Hello', likes: '15'},\n//             {name: 'Artsiom', message: 'Good morning', likes: '20'}\n//         ],\n//         newTextValue: ''\n//     },\n//     dialogsPage: {\n//         dialogsData: [\n//             {id: 1, name: 'Eduarda'},\n//             {id: 2, name: 'Artiom'},\n//             {id: 3, name: 'Dasha'},\n//             {id: 4, name: 'Ivan'},\n//             {id: 5, name: 'Ekaterina'},\n//         ],\n//         messageData: [\n//             {id: 1, message: 'Hi!'},\n//             {id: 2, message: 'How is your day?'},\n//             {id: 3, message: 'It\\'s good, thanks!'},\n//         ]\n//     },\n//     sidebar: {}\n// }\n\nexport let store = {\n  _callSubscriber() {\n    console.log('state changed');\n  },\n\n  _state: {\n    profilePage: {\n      postData: [{\n        name: 'Eduarda',\n        message: 'Hello',\n        likes: '15'\n      }, {\n        name: 'Artsiom',\n        message: 'Good morning',\n        likes: '20'\n      }],\n      newTextValue: ''\n    },\n    dialogsPage: {\n      dialogsData: [{\n        id: 1,\n        name: 'Eduarda'\n      }, {\n        id: 2,\n        name: 'Artiom'\n      }, {\n        id: 3,\n        name: 'Dasha'\n      }, {\n        id: 4,\n        name: 'Ivan'\n      }, {\n        id: 5,\n        name: 'Ekaterina'\n      }],\n      messageData: [{\n        id: 1,\n        message: 'Hi!'\n      }, {\n        id: 2,\n        message: 'How is your day?'\n      }, {\n        id: 3,\n        message: 'It\\'s good, thanks!'\n      }],\n      newMessage: ''\n    },\n    sidebar: {}\n  },\n\n  getState() {\n    return this._state;\n  },\n\n  subscribe(observer) {\n    this._callSubscriber = observer;\n  },\n\n  /*    addPost(postMessage: string) {\n          const newPost: PostData = {\n              name: 'Alex',\n              message: postMessage,\n              likes: '10',\n          }\n          this._state.profilePage.postData.push(newPost)\n          this._state.profilePage.newTextValue = '';\n          this._callSubscriber()\n      },\n      updateNewPostText(newText: string) {\n          this._state.profilePage.newTextValue = newText;\n          this._callSubscriber()\n      },*/\n  dispatch(action) {\n    this._state.profilePage = profileReducer(this._state.profilePage, action);\n    this._state.dialogsPage = dialogsReducer(this._state.dialogsPage, action);\n    this._state.sidebar = sidebarReducer(this._state.sidebar, action);\n\n    this._callSubscriber();\n    /*\n     if (action.type === ADD_POST) {\n                const newPost: PostData = {\n                    name: 'Alex',\n                    message: action.postMessage,\n                    likes: '10',\n                }\n                this._state.profilePage.postData.push(newPost)\n                this._state.profilePage.newTextValue = '';\n                this._callSubscriber()\n            } else if (action.type === NEW_POST_TEXT) {\n                this._state.profilePage.newTextValue = action.newText;\n                this._callSubscriber()\n            } else if (action.type === ADD_MESSAGE) {\n                const newMessage: MessageData = {\n                    message: action.postMessage,\n                    id: 10\n                }\n                this._state.dialogsPage.messageData.push(newMessage)\n                this._state.dialogsPage.newMessage = '';\n                this._callSubscriber()\n            } else if (action.type === NEW_MESSAGE){\n                this._state.dialogsPage.newMessage = action.newText;*/\n\n  }\n\n};\nexport const AddPostAC = newTextValue => ({\n  type: ADD_POST,\n  postMessage: newTextValue\n});\n_c = AddPostAC;\nexport const NewPostText = newText => ({\n  type: NEW_POST_TEXT,\n  newText: newText\n});\n_c2 = NewPostText;\nexport const AddMessage = newText => ({\n  type: ADD_MESSAGE,\n  postMessage: newText\n});\n_c3 = AddMessage;\nexport const NewMessage = newText => ({\n  type: NEW_MESSAGE,\n  newText: newText\n}); // export const addPost = (postMessage: string) => {\n//     const newPost: PostData = {\n//         name: 'Alex',\n//         message: postMessage,\n//         likes: '10',\n//     }\n//     state.profilePage.postData.push(newPost)\n//     state.profilePage.newTextValue = '';\n//     //renderTree();\n//     store.renderTree()\n// }\n\n/*\nexport const updateNewPostText = (newText: string) => {\n    state.profilePage.newTextValue = newText;\n    store.renderTree()\n}*/\n// export const subscribe = (observer: () => void) => {\n//     renderTree = observer;\n// }\n\n_c4 = NewMessage;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"AddPostAC\");\n$RefreshReg$(_c2, \"NewPostText\");\n$RefreshReg$(_c3, \"AddMessage\");\n$RefreshReg$(_c4, \"NewMessage\");","map":{"version":3,"sources":["/Users/eduardanaida/Documents/GitHub/-samurai-way/samurai-way/src/redux/state.tsx"],"names":["profileReducer","dialogsReducer","sidebarReducer","ADD_POST","NEW_POST_TEXT","ADD_MESSAGE","NEW_MESSAGE","store","_callSubscriber","console","log","_state","profilePage","postData","name","message","likes","newTextValue","dialogsPage","dialogsData","id","messageData","newMessage","sidebar","getState","subscribe","observer","dispatch","action","AddPostAC","type","postMessage","NewPostText","newText","AddMessage","NewMessage"],"mappings":"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","sourcesContent":["import {profileReducer} from \"./profileReducer\";\nimport {dialogsReducer} from \"./dialogsReducer\";\nimport {sidebarReducer} from \"./sidebarReducer\";\n\nexport type DialogsPageType = {\n    messageData: Array<MessageData>\n    dialogsData: Array<DialogsData>\n    newMessage: string\n}\n\nexport type ProfilePageType = {\n    postData: Array<PostData>\n    newTextValue: string\n}\n\nexport type PostData = {\n    name: string\n    message: string\n    likes: string\n}\n\nexport type MessageData = {\n    id: number\n    message: string\n}\n\nexport type DialogsData = {\n    id: number\n    name: string\n}\n\nexport type SidebarType = {}\n\nexport type RootStateType = {\n    profilePage: ProfilePageType\n    dialogsPage: DialogsPageType\n    sidebar: SidebarType\n}\n\nconst ADD_POST = 'ADD-POST';\nconst NEW_POST_TEXT = 'NEW-POST-TEXT';\nconst ADD_MESSAGE = \"ADD-MESSAGE\";\nconst NEW_MESSAGE = \"NEW-MESSAGE\";\n\n// export let state: RootStateType = {\n//     profilePage: {\n//         postData: [\n//             {name: 'Eduarda', message: 'Hello', likes: '15'},\n//             {name: 'Artsiom', message: 'Good morning', likes: '20'}\n//         ],\n//         newTextValue: ''\n//     },\n//     dialogsPage: {\n//         dialogsData: [\n//             {id: 1, name: 'Eduarda'},\n//             {id: 2, name: 'Artiom'},\n//             {id: 3, name: 'Dasha'},\n//             {id: 4, name: 'Ivan'},\n//             {id: 5, name: 'Ekaterina'},\n//         ],\n//         messageData: [\n//             {id: 1, message: 'Hi!'},\n//             {id: 2, message: 'How is your day?'},\n//             {id: 3, message: 'It\\'s good, thanks!'},\n//         ]\n//     },\n//     sidebar: {}\n// }\n\nexport type AddPostActionType = {\n    type: \"ADD-POST\"\n    postMessage: string\n}\nexport type AddMessageActionType = {\n    type: \"ADD-MESSAGE\"\n    postMessage: string\n}\nexport type NewMessageActionType = {\n    type: 'NEW-MESSAGE'\n    newText: string\n}\n\nexport type ChangeNewTextType = {\n    type: \"NEW-POST-TEXT\"\n    newText: string\n}\n\nexport type ActionsType = AddPostActionType | ChangeNewTextType | AddMessageActionType | NewMessageActionType\n\n\nexport type StoreType = {\n    _state: RootStateType,\n    _callSubscriber: () => void\n    getState: () => RootStateType\n    // addPost: (postMessage: string) => void\n    subscribe: (observer: () => void) => void\n    // updateNewPostText: (newText: string) => void\n    dispatch: (action: ActionsType) => void\n}\n\nexport let store: StoreType = {\n    _callSubscriber() {\n        console.log('state changed')\n    },\n    _state: {\n        profilePage: {\n            postData: [\n                {name: 'Eduarda', message: 'Hello', likes: '15'},\n                {name: 'Artsiom', message: 'Good morning', likes: '20'}\n            ],\n            newTextValue: ''\n        },\n        dialogsPage: {\n            dialogsData: [\n                {id: 1, name: 'Eduarda'},\n                {id: 2, name: 'Artiom'},\n                {id: 3, name: 'Dasha'},\n                {id: 4, name: 'Ivan'},\n                {id: 5, name: 'Ekaterina'},\n            ],\n            messageData: [\n                {id: 1, message: 'Hi!'},\n                {id: 2, message: 'How is your day?'},\n                {id: 3, message: 'It\\'s good, thanks!'},\n            ],\n            newMessage: ''\n        },\n        sidebar: {}\n    },\n    getState() {\n        return this._state;\n    },\n    subscribe(observer: () => void) {\n        this._callSubscriber = observer;\n    },\n\n    /*    addPost(postMessage: string) {\n            const newPost: PostData = {\n                name: 'Alex',\n                message: postMessage,\n                likes: '10',\n            }\n            this._state.profilePage.postData.push(newPost)\n            this._state.profilePage.newTextValue = '';\n            this._callSubscriber()\n        },\n        updateNewPostText(newText: string) {\n            this._state.profilePage.newTextValue = newText;\n            this._callSubscriber()\n        },*/\n    dispatch(action) {\n\n        this._state.profilePage = profileReducer(this._state.profilePage, action)\n        this._state.dialogsPage = dialogsReducer(this._state.dialogsPage, action)\n        this._state.sidebar = sidebarReducer(this._state.sidebar, action)\n        this._callSubscriber()\n        /*\n         if (action.type === ADD_POST) {\n                    const newPost: PostData = {\n                        name: 'Alex',\n                        message: action.postMessage,\n                        likes: '10',\n                    }\n                    this._state.profilePage.postData.push(newPost)\n                    this._state.profilePage.newTextValue = '';\n                    this._callSubscriber()\n                } else if (action.type === NEW_POST_TEXT) {\n                    this._state.profilePage.newTextValue = action.newText;\n                    this._callSubscriber()\n                } else if (action.type === ADD_MESSAGE) {\n                    const newMessage: MessageData = {\n                        message: action.postMessage,\n                        id: 10\n                    }\n                    this._state.dialogsPage.messageData.push(newMessage)\n                    this._state.dialogsPage.newMessage = '';\n                    this._callSubscriber()\n                } else if (action.type === NEW_MESSAGE){\n                    this._state.dialogsPage.newMessage = action.newText;*/\n\n}\n\n}\n\nexport const AddPostAC = (newTextValue: string): AddPostActionType => ({\n    type: ADD_POST,\n    postMessage: newTextValue\n})\n\nexport const NewPostText = (newText: string): ChangeNewTextType => ({\n    type: NEW_POST_TEXT,\n    newText: newText\n})\n\nexport const AddMessage = (newText: string): AddMessageActionType => ({\n    type: ADD_MESSAGE,\n    postMessage: newText\n})\nexport const NewMessage = (newText: string): NewMessageActionType => ({\n    type: NEW_MESSAGE,\n    newText: newText\n})\n\n// export const addPost = (postMessage: string) => {\n//     const newPost: PostData = {\n//         name: 'Alex',\n//         message: postMessage,\n//         likes: '10',\n//     }\n//     state.profilePage.postData.push(newPost)\n//     state.profilePage.newTextValue = '';\n//     //renderTree();\n//     store.renderTree()\n// }\n/*\nexport const updateNewPostText = (newText: string) => {\n    state.profilePage.newTextValue = newText;\n    store.renderTree()\n}*/\n\n// export const subscribe = (observer: () => void) => {\n//     renderTree = observer;\n// }"]},"metadata":{},"sourceType":"module"}